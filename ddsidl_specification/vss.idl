module Vehicle
{
module Powertrain
{
module CombustionEngine
{
struct EngineCode
{
string value;
//const string type ="attribute";
//const string description="Engine code designation, as specified by vehicle manufacturer.";
};
struct Displacement
{
unsigned short value;
//const string unit="cm^3";
//const string type ="attribute";
//const string description="Displacement in cubic centimetres.";
};
struct StrokeLength
{
float value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Stroke length in millimetres.";
};
struct Bore
{
float value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Bore in millimetres.";
};
module Configuration_M
{
enum ConfigurationValues{UNKNOWN,STRAIGHT,V,BOXER,W,ROTARY,RADIAL,SQUARE,H,U,OPPOSED,X};
};
struct Configuration
{
Configuration_M::ConfigurationValues value;
//const string type ="attribute";
//const string description="Engine configuration.";
};
struct NumberOfCylinders
{
unsigned short value;
//const string type ="attribute";
//const string description="Number of cylinders.";
};
struct NumberOfValvesPerCylinder
{
unsigned short value;
//const string type ="attribute";
//const string description="Number of valves per cylinder.";
};
struct CompressionRatio
{
string value;
//const string type ="attribute";
//const string description="Engine compression ratio, specified in the format 'X:1', e.g. '9.2:1'.";
};
struct EngineOilCapacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Engine oil capacity in liters.";
};
struct EngineCoolantCapacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Engine coolant capacity in liters.";
};
struct MaxPower
{
unsigned short value;
//const string unit="kW";
//const string type ="attribute";
//const string description="Peak power, in kilowatts, that engine can generate.";
};
struct MaxTorque
{
unsigned short value;
//const string unit="Nm";
//const string type ="attribute";
//const string description="Peak torque, in newton meter, that the engine can generate.";
};
module AspirationType_M
{
enum AspirationTypeValues{UNKNOWN,NATURAL,SUPERCHARGER,TURBOCHARGER};
};
struct AspirationType
{
AspirationType_M::AspirationTypeValues value;
//const string type ="attribute";
//const string description="Type of aspiration (natural, turbocharger, supercharger etc).";
};
module EngineOilLevel_M
{
enum EngineOilLevelValues{CRITICALLY_LOW,LOW,NORMAL,HIGH,CRITICALLY_HIGH};
};
struct EngineOilLevel
{
EngineOilLevel_M::EngineOilLevelValues value;
//const string type ="sensor";
//const string description="Engine oil level.";
};
struct OilLifeRemaining
{
long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.";
};
struct IsRunning
{
boolean value;
//const string type ="sensor";
//const string description="Engine Running. True if engine is rotating (Speed > 0).";
};
struct Speed
{
unsigned short value;
//const string unit="rpm";
//const string type ="sensor";
//const string description="Engine speed measured as rotations per minute.";
};
struct EngineHours
{
float value;
//const string unit="h";
//const string type ="sensor";
//const string description="Accumulated time during engine lifetime with 'engine speed (rpm) > 0'.";
};
struct IdleHours
{
float value;
//const string unit="h";
//const string type ="sensor";
//const string description="Accumulated idling time during engine lifetime. Definition of idling is not standardized.";
};
struct ECT
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Engine coolant temperature.";
};
struct EOT
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Engine oil temperature.";
};
module EngineOil
{
struct Capacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Engine oil capacity in liters.";
};
module Level_M
{
enum LevelValues{CRITICALLY_LOW,LOW,NORMAL,HIGH,CRITICALLY_HIGH};
};
struct Level
{
Level_M::LevelValues value;
//const string type ="sensor";
//const string description="Engine oil level.";
};
struct LifeRemaining
{
long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Remaining engine oil life in seconds. Negative values can be used to indicate that lifetime has been exceeded.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="EOT, Engine oil temperature.";
};
};

module EngineCoolant
{
struct Capacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Engine coolant capacity in liters.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Engine coolant temperature.";
};
module Level_M
{
enum LevelValues{CRITICALLY_LOW,LOW,NORMAL};
};
struct Level
{
Level_M::LevelValues value;
//const string type ="sensor";
//const string description="Engine coolant level.";
};
struct LifeRemaining
{
long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Remaining engine coolant life in seconds. Negative values can be used to indicate that lifetime has been exceeded.";
};
};

struct _MAP
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Manifold absolute pressure possibly boosted using forced induction.";
};
struct MAF
{
unsigned short value;
//const string unit="g/s";
//const string type ="sensor";
//const string description="Grams of air drawn into engine per second.";
};
struct TPS
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Current throttle position.";
};
struct EOP
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Engine oil pressure.";
};
struct Power
{
unsigned short value;
//const string unit="kW";
//const string type ="sensor";
//const string description="Current engine power output. Shall be reported as 0 during engine breaking.";
};
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Current engine torque. Shall be reported as a negative number during engine breaking.";
};
module DieselExhaustFluid
{
struct Capacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Capacity in liters of the Diesel Exhaust Fluid Tank.";
};
struct Level
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Level of the Diesel Exhaust Fluid tank as percent of capacity. 0 = empty. 100 = full.";
};
struct Range
{
unsigned long value;
//const string unit="m";
//const string type ="sensor";
//const string description="Remaining range in meters of the Diesel Exhaust Fluid present in the vehicle.";
};
struct IsLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if the Diesel Exhaust Fluid level is low. True if level is low. Definition of low is vehicle dependent.";
};
};

module DieselParticulateFilter
{
struct InletTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Inlet temperature of Diesel Particulate Filter.";
};
struct OutletTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Outlet temperature of Diesel Particulate Filter.";
};
struct DeltaPressure
{
float value;
//const string unit="Pa";
//const string type ="sensor";
//const string description="Delta Pressure of Diesel Particulate Filter.";
};
};

};

module Transmission
{
module Type_M
{
enum TypeValues{UNKNOWN,SEQUENTIAL,H,AUTOMATIC,DSG,CVT};
};
struct Type
{
Type_M::TypeValues value;
//const string type ="attribute";
//const string description="Transmission type.";
};
struct GearCount
{
octet value;
//const string type ="attribute";
//const string description="Number of forward gears in the transmission. -1 = CVT.";
};
module DriveType_M
{
enum DriveTypeValues{UNKNOWN,FORWARD_WHEEL_DRIVE,REAR_WHEEL_DRIVE,ALL_WHEEL_DRIVE};
};
struct DriveType
{
DriveType_M::DriveTypeValues value;
//const string type ="attribute";
//const string description="Drive type.";
};
struct TravelledDistance
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="Odometer reading, total distance travelled during the lifetime of the transmission.";
};
struct CurrentGear
{
octet value;
//const string type ="sensor";
//const string description="The current gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse.";
};
struct SelectedGear
{
octet value;
//const string type ="actuator";
//const string description="The selected gear. 0=Neutral, 1/2/..=Forward, -1/-2/..=Reverse, 126=Park, 127=Drive.";
};
struct IsParkLockEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is the transmission park lock engaged or not. False = Disengaged. True = Engaged.";
};
struct IsLowRangeEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is gearbox in low range mode or not. False = Normal/High range engaged. True = Low range engaged.";
};
struct IsElectricalPowertrainEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is electrical powertrain mechanically connected/engaged to the drivetrain or not. False = Disconnected/Disengaged. True = Connected/Engaged.";
};
module PerformanceMode_M
{
enum PerformanceModeValues{NORMAL,SPORT,ECONOMY,SNOW,RAIN};
};
struct PerformanceMode
{
PerformanceMode_M::PerformanceModeValues value;
//const string type ="actuator";
//const string description="Current gearbox performance mode.";
};
module GearChangeMode_M
{
enum GearChangeModeValues{MANUAL,AUTOMATIC};
};
struct GearChangeMode
{
GearChangeMode_M::GearChangeModeValues value;
//const string type ="actuator";
//const string description="Is the gearbox in automatic or manual (paddle) mode.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="The current gearbox temperature.";
};
struct ClutchEngagement
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Clutch engagement. 0% = Clutch fully disengaged. 100% = Clutch fully engaged.";
};
struct ClutchWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Clutch wear as a percent. 0 = no wear. 100 = worn.";
};
struct DiffLockFrontEngagement
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Front Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.";
};
struct DiffLockRearEngagement
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Rear Diff Lock engagement. 0% = Diff lock fully disengaged. 100% = Diff lock fully engaged.";
};
struct TorqueDistribution
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Torque distribution between front and rear axle in percent. -100% = Full torque to front axle, 0% = 50:50 Front/Rear, 100% = Full torque to rear axle.";
};
};

module ElectricMotor
{
struct EngineCode
{
string value;
//const string type ="attribute";
//const string description="Engine code designation, as specified by vehicle manufacturer.";
};
struct MaxPower
{
unsigned short value;
//const string unit="kW";
//const string type ="attribute";
//const string description="Peak power, in kilowatts, that motor(s) can generate.";
};
struct MaxTorque
{
unsigned short value;
//const string unit="Nm";
//const string type ="attribute";
//const string description="Peak power, in newton meter, that the motor(s) can generate.";
};
struct MaxRegenPower
{
unsigned short value;
//const string unit="kW";
//const string type ="attribute";
//const string description="Peak regen/brake power, in kilowatts, that motor(s) can generate.";
};
struct MaxRegenTorque
{
unsigned short value;
//const string unit="Nm";
//const string type ="attribute";
//const string description="Peak regen/brake torque, in newton meter, that the motor(s) can generate.";
};
struct Speed
{
long value;
//const string unit="rpm";
//const string type ="sensor";
//const string description="Motor rotational speed measured as rotations per minute. Negative values indicate reverse driving mode.";
};
struct TimeInUse
{
float value;
//const string unit="h";
//const string type ="sensor";
//const string description="Accumulated time during engine lifetime when the vehicule state's is 'READY'.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Motor temperature.";
};
struct CoolantTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Motor coolant temperature (if applicable).";
};
module EngineCoolant
{
struct Capacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Engine coolant capacity in liters.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Engine coolant temperature.";
};
module Level_M
{
enum LevelValues{CRITICALLY_LOW,LOW,NORMAL};
};
struct Level
{
Level_M::LevelValues value;
//const string type ="sensor";
//const string description="Engine coolant level.";
};
struct LifeRemaining
{
long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Remaining engine coolant life in seconds. Negative values can be used to indicate that lifetime has been exceeded.";
};
};

struct Power
{
short value;
//const string unit="kW";
//const string type ="sensor";
//const string description="Current motor power output. Negative values indicate regen mode.";
};
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Current motor torque. Negative values indicate regen mode.";
};
};

module TractionBattery
{
struct Id
{
string value;
//const string type ="attribute";
//const string description="Battery Identification Number as assigned by OEM.";
};
struct ProductionDate
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="Production date of battery in ISO8601 format, e.g. YYYY-MM-DD.";
};
struct ErrorCodes
{
sequence<string> value;
//const string type ="sensor";
//const string description="Current error codes related to the battery, if any.";
};
struct IsPowerConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicating if the power (positive terminator) of the traction battery is connected to the powertrain.";
};
struct IsGroundConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicating if the ground (negative terminator) of the traction battery is connected to the powertrain.";
};
module Temperature
{
struct Average
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Current average temperature of the battery cells.";
};
struct Min
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Current minimum temperature of the battery cells, i.e. temperature of the coldest cell.";
};
struct Max
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Current maximum temperature of the battery cells, i.e. temperature of the hottest cell.";
};
struct CellTemperature
{
sequence<float> value;
//const string type ="sensor";
//const string description="Array of cell temperatures. Length or array shall correspond to number of cells in vehicle.";
};
};

module CellVoltage
{
struct Min
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current voltage of the battery cell with lowest voltage.";
};
struct IdMin
{
unsigned short value;
//const string type ="sensor";
//const string description="Identifier of the battery cell with lowest voltage.";
};
struct Max
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current voltage of the battery cell with highest voltage.";
};
struct IdMax
{
unsigned short value;
//const string type ="sensor";
//const string description="Identifier of the battery cell with highest voltage.";
};
struct CellVoltages
{
sequence<float> value;
//const string type ="sensor";
//const string description="Array of cell voltages. Length or array shall correspond to number of cells in vehicle.";
};
};

struct GrossCapacity
{
unsigned short value;
//const string unit="kWh";
//const string type ="attribute";
//const string description="Gross capacity of the battery.";
};
struct NetCapacity
{
unsigned short value;
//const string unit="kWh";
//const string type ="sensor";
//const string description="Total net capacity of the battery considering aging.";
};
struct StateOfHealth
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Calculated battery state of health at standard conditions.";
};
module StateOfCharge
{
struct Current
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Physical state of charge of the high voltage battery, relative to net capacity. This is not necessarily the state of charge being displayed to the customer.";
};
struct Displayed
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="State of charge displayed to the customer.";
};
struct CurrentEnergy
{
float value;
//const string unit="kWh";
//const string type ="sensor";
//const string description="Physical state of charge of high voltage battery expressed in kWh.";
};
};

struct NominalVoltage
{
unsigned short value;
//const string unit="V";
//const string type ="attribute";
//const string description="Nominal Voltage of the battery.";
};
struct MaxVoltage
{
unsigned short value;
//const string unit="V";
//const string type ="attribute";
//const string description="Max allowed voltage of the battery, e.g. during charging.";
};
struct CurrentVoltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current Voltage of the battery.";
};
struct CurrentCurrent
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current current flowing in/out of battery. Positive = Current flowing in to battery, e.g. during charging. Negative = Current flowing out of battery, e.g. during driving.";
};
struct CurrentPower
{
float value;
//const string unit="W";
//const string type ="sensor";
//const string description="Current electrical energy flowing in/out of battery. Positive = Energy flowing in to battery, e.g. during charging. Negative = Energy flowing out of battery, e.g. during driving.";
};
struct AccumulatedChargedEnergy
{
float value;
//const string unit="kWh";
//const string type ="sensor";
//const string description="The accumulated energy delivered to the battery during charging over lifetime of the battery.";
};
struct AccumulatedConsumedEnergy
{
float value;
//const string unit="kWh";
//const string type ="sensor";
//const string description="The accumulated energy leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.";
};
struct AccumulatedChargedThroughput
{
float value;
//const string unit="Ah";
//const string type ="sensor";
//const string description="The accumulated charge throughput delivered to the battery during charging over lifetime of the battery.";
};
struct AccumulatedConsumedThroughput
{
float value;
//const string unit="Ah";
//const string type ="sensor";
//const string description="The accumulated charge throughput leaving HV battery for propulsion and auxiliary loads over lifetime of the battery.";
};
struct PowerLoss
{
float value;
//const string unit="W";
//const string type ="sensor";
//const string description="Electrical energy lost by power dissipation to heat inside the battery.";
};
struct Range
{
unsigned long value;
//const string unit="m";
//const string type ="sensor";
//const string description="Remaining range in meters using only battery.";
};
struct TimeRemaining
{
unsigned long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Time remaining in seconds before the battery is empty.";
};
module Charging
{
module ChargingPort
{
module FrontLeft
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module FrontMiddle
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module FrontRight
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module RearLeft
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module RearMiddle
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module RearRight
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

module AnyPosition
{
module SupportedInletTypes_M
{
enum SupportedInletTypesValues{IEC_TYPE_1_AC,IEC_TYPE_2_AC,IEC_TYPE_3_AC,IEC_TYPE_4_DC,IEC_TYPE_1_CCS_DC,IEC_TYPE_2_CCS_DC,TESLA_ROADSTER,TESLA_HPWC,TESLA_SUPERCHARGER,GBT_AC,GBT_DC,OTHER};
};
struct SupportedInletTypes
{
SupportedInletTypes_M::SupportedInletTypesValues value;
//const string type ="attribute";
//const string description="A list of the supported (i.e., available) charging inlets in a particular charging port. IEC types refer to IEC 62196,  GBT refers to  GB/T 20234.";
};
struct IsFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the charging port flap(s).";
};
struct IsChargingCableConnected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether a charging cable is physically connected to a particular charging port or not.";
};
struct IsChargingCableLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is charging cable locked to prevent removal.";
};
};

};

struct ChargeLimit
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Target charge limit (state of charge) for battery.";
};
module MaximumChargingCurrent
{
struct DC
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Maximum DC charging current at inlet that can be accepted by the system.";
};
struct Phase1
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Maximum AC charging current (rms) at inlet for Phase 1 that can be accepted by the system.";
};
struct Phase2
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Maximum AC charging current (rms) at inlet for Phase 2 that can be accepted by the system.";
};
struct Phase3
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Maximum AC charging current (rms) at inlet for Phase 3 that can be accepted by the system.";
};
};

struct IsCharging
{
boolean value;
//const string type ="sensor";
//const string description="True if charging is ongoing. Charging is considered to be ongoing if energy is flowing from charger to vehicle.";
};
struct IsDischarging
{
boolean value;
//const string type ="sensor";
//const string description="True if discharging (vehicle to grid) is ongoing. Discharging is considered to be ongoing if energy is flowing from vehicle to charger/grid.";
};
module StartStopCharging_M
{
enum StartStopChargingValues{START,STOP};
};
struct StartStopCharging
{
StartStopCharging_M::StartStopChargingValues value;
//const string type ="actuator";
//const string description="Start or stop the charging process.";
};
module ChargeCurrent
{
struct DC
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current DC charging current at inlet. Negative if returning energy to grid.";
};
struct Phase1
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current AC charging current (rms) at inlet for Phase 1. Negative if returning energy to grid.";
};
struct Phase2
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current AC charging current (rms) at inlet for Phase 2. Negative if returning energy to grid.";
};
struct Phase3
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current AC charging current (rms) at inlet for Phase 3. Negative if returning energy to grid.";
};
};

module ChargeVoltage
{
struct DC
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current DC charging voltage at charging inlet.";
};
struct Phase1
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current AC charging voltage (rms) at inlet for Phase 1.";
};
struct Phase2
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current AC charging voltage (rms) at inlet for Phase 2.";
};
struct Phase3
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current AC charging voltage (rms) at inlet for Phase 3.";
};
};

struct AveragePower
{
float value;
//const string unit="kW";
//const string type ="sensor";
//const string description="Average charging power of last or current charging event.";
};
struct MaxPower
{
float value;
//const string unit="kW";
//const string type ="sensor";
//const string description="Maximum charging power of last or current charging event.";
};
struct EvseId
{
string value;
//const string type ="sensor";
//const string description="EVSE charging point ID (without separators) of last or current charging event according to ISO 15118-2 Annex H.";
};
module Location
{
struct Latitude
{
double value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Latitude of last or current charging event in WGS 84 geodetic coordinates.";
};
struct Longitude
{
double value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Longitude of last or current charging event in WGS 84 geodetic coordinates.";
};
struct Altitude
{
double value;
//const string unit="m";
//const string type ="sensor";
//const string description="Altitude relative to WGS 84 reference ellipsoid of last or current charging event.";
};
};

struct PowerLoss
{
float value;
//const string unit="W";
//const string type ="sensor";
//const string description="Electrical energy lost by power dissipation to heat inside the AC/DC converter.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Current temperature of AC/DC converter converting grid voltage to battery voltage.";
};
struct ChargeRate
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Current charging rate, as in kilometers of range added per hour.";
};
struct TimeToComplete
{
unsigned long value;
//const string unit="s";
//const string type ="sensor";
//const string description="The time needed for the current charging process to reach Charging.ChargeLimit. 0 if charging is complete or no charging process is active or planned.";
};
module Timer
{
module Mode_M
{
enum ModeValues{INACTIVE,START_TIME,END_TIME};
};
struct Mode
{
Mode_M::ModeValues value;
//const string type ="actuator";
//const string description="Defines timer mode for charging: INACTIVE - no timer set, charging may start as soon as battery is connected to a charger. START_TIME - charging shall start at Charging.Timer.Time. END_TIME - charging shall be finished (reach Charging.ChargeLimit) at Charging.Timer.Time. When charging is completed the vehicle shall change mode to 'inactive' or set a new Charging.Timer.Time. Charging shall start immediately if mode is 'starttime' or 'endtime' and Charging.Timer.Time is a time in the past.";
};
struct Time
{
string value;
//const string unit="iso8601";
//const string type ="actuator";
//const string description="Time for next charging-related action, formatted according to ISO 8601 with UTC time zone. Value has no significance if Charging.Timer.Mode is 'inactive'.";
};
};

};

module DCDC
{
struct PowerLoss
{
float value;
//const string unit="W";
//const string type ="sensor";
//const string description="Electrical energy lost by power dissipation to heat inside DC/DC converter.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Current temperature of DC/DC converter converting battery high voltage to vehicle low voltage (typically 12 Volts).";
};
};

module BatteryConditioning
{
struct IsActive
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if battery conditioning is active (i.e. actively monitors battery temperature). True = Active. False = Inactive.";
};
struct IsOngoing
{
boolean value;
//const string type ="sensor";
//const string description="Indicating if battery conditioning is currently ongoing. Battery conditioning is considered ongoing when the battery conditioning system is actively heating or cooling the battery, or requesting heating or cooling.";
};
module RequestedMode_M
{
enum RequestedModeValues{INACTIVE,FAST_CHARGING_PREPARATION,DRIVING_PREPARATION};
};
struct RequestedMode
{
RequestedMode_M::RequestedModeValues value;
//const string type ="actuator";
//const string description="Defines requested mode for battery conditioning. INACTIVE - Battery conditioning inactive. FAST_CHARGING_PREPARATION - Battery conditioning for fast charging. DRIVING_PREPARATION - Battery conditioning for driving.";
};
struct StartTime
{
string value;
//const string unit="iso8601";
//const string type ="actuator";
//const string description="Start time for battery conditioning, formatted according to ISO 8601 with UTC time zone.";
};
struct TargetTime
{
string value;
//const string unit="iso8601";
//const string type ="actuator";
//const string description="Target time when conditioning shall be finished, formatted according to ISO 8601 with UTC time zone.";
};
struct TargetTemperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Target temperature for battery conditioning.";
};
};

};

module FuelSystem
{
module SupportedFuelTypes_M
{
enum SupportedFuelTypesValues{GASOLINE,DIESEL,E85,LPG,CNG,LNG,H2,OTHER};
};
struct SupportedFuelTypes
{
SupportedFuelTypes_M::SupportedFuelTypesValues value;
//const string type ="attribute";
//const string description="High level information of fuel types supported";
};
module SupportedFuel_M
{
enum SupportedFuelValues{E5_95,E5_98,E10_95,E10_98,E85,B7,B10,B20,B30,B100,XTL,LPG,CNG,LNG,H2,OTHER};
};
struct SupportedFuel
{
SupportedFuel_M::SupportedFuelValues value;
//const string type ="attribute";
//const string description="Detailed information on fuels supported by the vehicle. Identifiers originating from DIN EN 16942:2021-08, appendix B, with additional suffix for octane (RON) where relevant.";
};
module HybridType_M
{
enum HybridTypeValues{UNKNOWN,NOT_APPLICABLE,STOP_START,BELT_ISG,CIMG,PHEV};
};
struct HybridType
{
HybridType_M::HybridTypeValues value;
//const string type ="attribute";
//const string description="Defines the hybrid type of the vehicle.";
};
struct TankCapacity
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="Capacity of the fuel tank in liters.";
};
struct AbsoluteLevel
{
float value;
//const string unit="l";
//const string type ="sensor";
//const string description="Current available fuel in the fuel tank expressed in liters.";
};
struct RelativeLevel
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Level in fuel tank as percent of capacity. 0 = empty. 100 = full.";
};
struct Range
{
unsigned long value;
//const string unit="m";
//const string type ="sensor";
//const string description="Remaining range in meters using only liquid fuel.";
};
struct TimeRemaining
{
unsigned long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Time remaining in seconds before the fuel tank is empty.";
};
struct InstantConsumption
{
float value;
//const string unit="l/100km";
//const string type ="sensor";
//const string description="Current consumption in liters per 100 km.";
};
struct AverageConsumption
{
float value;
//const string unit="l/100km";
//const string type ="sensor";
//const string description="Average consumption in liters per 100 km.";
};
struct ConsumptionSinceStart
{
float value;
//const string unit="l";
//const string type ="sensor";
//const string description="Fuel amount in liters consumed since start of current trip.";
};
struct ConsumptionSinceLastRefuel
{
float value;
//const string unit="l";
//const string type ="sensor";
//const string description="Fuel consumption since last refueling.";
};
struct IsEngineStopStartEnabled
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether eco start stop is currently enabled.";
};
struct IsFuelLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Indicates that the fuel level is low (e.g. <50km range).";
};
module RefuelPortPosition_M
{
enum RefuelPortPositionValues{FRONT_LEFT,FRONT_MIDDLE,FRONT_RIGHT,REAR_LEFT,REAR_MIDDLE,REAR_RIGHT,LEFT_FRONT,LEFT_MIDDLE,LEFT_REAR,RIGHT_FRONT,RIGHT_MIDDLE,RIGHT_REAR};
};
struct RefuelPortPosition
{
RefuelPortPosition_M::RefuelPortPositionValues value;
//const string type ="attribute";
//const string description="Position of refuel port(s). First part indicates side of vehicle, second part relative position on that side.";
};
struct IsFuelPortFlapOpen
{
boolean value;
//const string type ="actuator";
//const string description="Status of the fuel port flap(s). True if at least one is open.";
};
};

struct AccumulatedBrakingEnergy
{
float value;
//const string unit="kWh";
//const string type ="sensor";
//const string description="The accumulated energy from regenerative braking over lifetime.";
};
struct Range
{
unsigned long value;
//const string unit="m";
//const string type ="sensor";
//const string description="Remaining range in meters using all energy sources available in the vehicle.";
};
struct TimeRemaining
{
unsigned long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Time remaining in seconds before all energy sources available in the vehicle are empty.";
};
module Type_M
{
enum TypeValues{COMBUSTION,HYBRID,ELECTRIC};
};
struct Type
{
Type_M::TypeValues value;
//const string type ="attribute";
//const string description="Defines the powertrain type of the vehicle.";
};
struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module Body
{
struct BodyType
{
string value;
//const string type ="attribute";
//const string description="Body type code as defined by ISO 3779.";
};
module Hood
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

module Trunk
{
module Front
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Is trunk light on";
};
struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

module Rear
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Is trunk light on";
};
struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

};

module Horn
{
struct IsActive
{
boolean value;
//const string type ="actuator";
//const string description="Horn active or inactive. True = Active. False = Inactive.";
};
};

module Raindetection
{
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Rain intensity. 0 = Dry, No Rain. 100 = Covered.";
};
};

module Windshield
{
module Front
{
module Wiping
{
module Mode_M
{
enum ModeValues{OFF,SLOW,MEDIUM,FAST,INTERVAL,RAIN_SENSOR};
};
struct Mode
{
Mode_M::ModeValues value;
//const string type ="actuator";
//const string description="Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.";
};
struct Intensity
{
octet value;
//const string type ="actuator";
//const string description="Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.";
};
module System
{
module Mode_M
{
enum ModeValues{STOP_HOLD,WIPE,PLANT_MODE,EMERGENCY_STOP};
};
struct Mode
{
Mode_M::ModeValues value;
//const string type ="actuator";
//const string description="Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.";
};
struct Frequency
{
octet value;
//const string unit="cpm";
//const string type ="actuator";
//const string description="Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.";
};
struct TargetPosition
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.";
};
struct ActualPosition
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.";
};
struct DriveCurrent
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Actual current used by wiper drive.";
};
struct IsWiping
{
boolean value;
//const string type ="sensor";
//const string description="Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.";
};
struct IsEndingWipeCycle
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.";
};
struct IsWiperError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates system failure. True if wiping is disabled due to system failure.";
};
struct IsPositionReached
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.";
};
struct IsBlocked
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.";
};
struct IsOverheated
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.";
};
};

struct WiperWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.";
};
struct IsWipersWorn
{
boolean value;
//const string type ="sensor";
//const string description="Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.";
};
};

struct IsHeatingOn
{
boolean value;
//const string type ="actuator";
//const string description="Windshield heater status. False - off, True - on.";
};
module WasherFluid
{
struct IsLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Low level indication for washer fluid. True = Level Low. False = Level OK.";
};
struct Level
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Washer fluid level as a percent. 0 = Empty. 100 = Full.";
};
};

};

module Rear
{
module Wiping
{
module Mode_M
{
enum ModeValues{OFF,SLOW,MEDIUM,FAST,INTERVAL,RAIN_SENSOR};
};
struct Mode
{
Mode_M::ModeValues value;
//const string type ="actuator";
//const string description="Wiper mode requested by user/driver. INTERVAL indicates intermittent wiping, with fixed time interval between each wipe. RAIN_SENSOR indicates intermittent wiping based on rain intensity.";
};
struct Intensity
{
octet value;
//const string type ="actuator";
//const string description="Relative intensity/sensitivity for interval and rain sensor mode as requested by user/driver. Has no significance if Windshield.Wiping.Mode is OFF/SLOW/MEDIUM/FAST 0 - wipers inactive. 1 - minimum intensity (lowest frequency/sensitivity, longest interval). 2/3/4/... - higher intensity (higher frequency/sensitivity, shorter interval). Maximum value supported is vehicle specific.";
};
module System
{
module Mode_M
{
enum ModeValues{STOP_HOLD,WIPE,PLANT_MODE,EMERGENCY_STOP};
};
struct Mode
{
Mode_M::ModeValues value;
//const string type ="actuator";
//const string description="Requested mode of wiper system. STOP_HOLD means that the wipers shall move to position given by TargetPosition and then hold the position. WIPE means that wipers shall move to the position given by TargetPosition and then hold the position if no new TargetPosition is requested. PLANT_MODE means that wiping is disabled. Exact behavior is vehicle specific. EMERGENCY_STOP means that wiping shall be immediately stopped without holding the position.";
};
struct Frequency
{
octet value;
//const string unit="cpm";
//const string type ="actuator";
//const string description="Wiping frequency/speed, measured in cycles per minute. The signal concerns the actual speed of the wiper blades when moving. Intervals/pauses are excluded, i.e. the value corresponds to the number of cycles that would be completed in 1 minute if wiping permanently over default range.";
};
struct TargetPosition
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Requested position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific. System behavior when receiving TargetPosition depends on Mode and IsEndingWipeCycle. Supported values are vehicle specific and might be dynamically corrected. If IsEndingWipeCycle=True then wipers will complete current movement before actuating new TargetPosition. If IsEndingWipeCycle=False then wipers will directly change destination if the TargetPosition is changed.";
};
struct ActualPosition
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Actual position of main wiper blade for the wiper system relative to reference position. Location of reference position (0 degrees) and direction of positive/negative degrees is vehicle specific.";
};
struct DriveCurrent
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Actual current used by wiper drive.";
};
struct IsWiping
{
boolean value;
//const string type ="sensor";
//const string description="Indicates wiper movement. True if wiper blades are moving. Change of direction shall be considered as IsWiping if wipers will continue to move directly after the change of direction.";
};
struct IsEndingWipeCycle
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if current wipe movement is completed or near completion. True = Movement is completed or near completion. Changes to RequestedPosition will be executed first after reaching previous RequestedPosition, if it has not already been reached. False = Movement is not near completion. Any change to RequestedPosition will be executed immediately. Change of direction may not be allowed.";
};
struct IsWiperError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates system failure. True if wiping is disabled due to system failure.";
};
struct IsPositionReached
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if a requested position has been reached. IsPositionReached refers to the previous position in case the TargetPosition is updated while IsEndingWipeCycle=True. True = Current or Previous TargetPosition reached. False = Position not (yet) reached, or wipers have moved away from the reached position.";
};
struct IsBlocked
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if wiper movement is blocked. True = Movement blocked. False = Movement not blocked.";
};
struct IsOverheated
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if wiper system is overheated. True = Wiper system overheated. False = Wiper system not overheated.";
};
};

struct WiperWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Wiper wear as percent. 0 = No Wear. 100 = Worn. Replacement required. Method for calculating or estimating wiper wear is vehicle specific. For windshields with multiple wipers the wear reported shall correspond to the most worn wiper.";
};
struct IsWipersWorn
{
boolean value;
//const string type ="sensor";
//const string description="Wiper wear status. True = Worn, Replacement recommended or required. False = Not Worn.";
};
};

struct IsHeatingOn
{
boolean value;
//const string type ="actuator";
//const string description="Windshield heater status. False - off, True - on.";
};
module WasherFluid
{
struct IsLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Low level indication for washer fluid. True = Level Low. False = Level OK.";
};
struct Level
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Washer fluid level as a percent. 0 = Empty. 100 = Full.";
};
};

};

};

module Lights
{
module LightSwitch_M
{
enum LightSwitchValues{OFF,POSITION,DAYTIME_RUNNING_LIGHTS,AUTO,BEAM};
};
struct LightSwitch
{
LightSwitch_M::LightSwitchValues value;
//const string type ="actuator";
//const string description="Status of the vehicle main light switch.";
};
struct IsHighBeamSwitchOn
{
boolean value;
//const string type ="actuator";
//const string description="Status of the high beam switch. True = high beam enabled. False = high beam not enabled.";
};
module Beam
{
module Low
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module High
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

};

module Running
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Backup
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Parking
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Fog
{
module Rear
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Front
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

};

module LicensePlate
{
struct IsOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is on or off. True = On. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Brake
{
module IsActive_M
{
enum IsActiveValues{INACTIVE,ACTIVE,ADAPTIVE};
};
struct IsActive
{
IsActive_M::IsActiveValues value;
//const string type ="actuator";
//const string description="Indicates if break-light is active. INACTIVE means lights are off. ACTIVE means lights are on. ADAPTIVE means that break-light is indicating emergency-breaking.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Hazard
{
struct IsSignaling
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is signaling or off. True = signaling. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module DirectionIndicator
{
module Left
{
struct IsSignaling
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is signaling or off. True = signaling. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

module Right
{
struct IsSignaling
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if light is signaling or off. True = signaling. False = Off.";
};
struct IsDefect
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if light is defect. True = Light is defect. False = Light has no defect.";
};
};

};

};

module Mirrors
{
module DriverSide
{
struct Tilt
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.";
};
struct Pan
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.";
};
struct IsHeatingOn
{
boolean value;
//const string type ="actuator";
//const string description="Mirror Heater on or off. True = Heater On. False = Heater Off.";
};
struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.";
};
struct IsFolded
{
boolean value;
//const string type ="actuator";
//const string description="Is mirror folded? True = Fully or partially folded. False = Fully unfolded.";
};
};

module PassengerSide
{
struct Tilt
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Mirror tilt as a percent. 0 = Center Position. 100 = Fully Upward Position. -100 = Fully Downward Position.";
};
struct Pan
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Mirror pan as a percent. 0 = Center Position. 100 = Fully Left Position. -100 = Fully Right Position.";
};
struct IsHeatingOn
{
boolean value;
//const string type ="actuator";
//const string description="Mirror Heater on or off. True = Heater On. False = Heater Off.";
};
struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is mirror movement locked? True = Locked, mirror will not react to Tilt/Pan change. False = Unlocked.";
};
struct IsFolded
{
boolean value;
//const string type ="actuator";
//const string description="Is mirror folded? True = Fully or partially folded. False = Fully unfolded.";
};
};

};

struct RearMainSpoilerPosition
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Rear spoiler position, 0% = Spoiler fully stowed. 100% = Spoiler fully exposed.";
};
struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module Cabin
{
module RearShade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

module HVAC
{
module Station
{
module Row1
{
module Driver
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

module Passenger
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

};

module Row2
{
module Driver
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

module Passenger
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

};

module Row3
{
module Driver
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

module Passenger
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

};

module Row4
{
module Driver
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

module Passenger
{
struct FanSpeed
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Fan Speed, 0 = off. 100 = max";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="actuator";
//const string description="Temperature";
};
module AirDistribution_M
{
enum AirDistributionValues{UP,MIDDLE,DOWN};
};
struct AirDistribution
{
AirDistribution_M::AirDistributionValues value;
//const string type ="actuator";
//const string description="Direction of airstream";
};
};

};

};

struct IsRecirculationActive
{
boolean value;
//const string type ="actuator";
//const string description="Is recirculation active.";
};
struct IsFrontDefrosterActive
{
boolean value;
//const string type ="actuator";
//const string description="Is front defroster active.";
};
struct IsRearDefrosterActive
{
boolean value;
//const string type ="actuator";
//const string description="Is rear defroster active.";
};
struct IsAirConditioningActive
{
boolean value;
//const string type ="actuator";
//const string description="Is Air conditioning active.";
};
struct AmbientAirTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Ambient air temperature inside the vehicle.";
};
struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module Infotainment
{
module Media
{
module Action_M
{
enum ActionValues{UNKNOWN,STOP,PLAY,FAST_FORWARD,FAST_BACKWARD,SKIP_FORWARD,SKIP_BACKWARD};
};
struct Action
{
Action_M::ActionValues value;
//const string type ="actuator";
//const string description="Tells if the media was";
};
module Played
{
module Source_M
{
enum SourceValues{UNKNOWN,SIRIUS_XM,AM,FM,DAB,TV,CD,DVD,AUX,USB,DISK,BLUETOOTH,INTERNET,VOICE,BEEP};
};
struct Source
{
Source_M::SourceValues value;
//const string type ="actuator";
//const string description="Media selected for playback";
};
struct Genre
{
string value;
//const string type ="sensor";
//const string description="Name of genre being played";
};
struct Artist
{
string value;
//const string type ="sensor";
//const string description="Name of artist being played";
};
struct Album
{
string value;
//const string type ="sensor";
//const string description="Name of album being played";
};
struct Track
{
string value;
//const string type ="sensor";
//const string description="Name of track being played";
};
struct URI
{
string value;
//const string type ="sensor";
//const string description="User Resource associated with the media";
};
struct PlaybackRate
{
float value;
//const string type ="actuator";
//const string description="Current playback rate of media being played.";
};
};

struct DeclinedURI
{
string value;
//const string type ="sensor";
//const string description="URI of suggested media that was declined";
};
struct SelectedURI
{
string value;
//const string type ="actuator";
//const string description="URI of suggested media that was selected";
};
struct Volume
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Current Media Volume";
};
};

module Navigation
{
module DestinationSet
{
struct Latitude
{
double value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Latitude of destination in WGS 84 geodetic coordinates.";
};
struct Longitude
{
double value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Longitude of destination in WGS 84 geodetic coordinates.";
};
};

module Mute_M
{
enum MuteValues{MUTED,ALERT_ONLY,UNMUTED};
};
struct Mute
{
Mute_M::MuteValues value;
//const string type ="actuator";
//const string description="Navigation mute state that was selected.";
};
struct Volume
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Current navigation volume";
};
module GuidanceVoice_M
{
enum GuidanceVoiceValues{STANDARD_MALE,STANDARD_FEMALE,ETC};
};
struct GuidanceVoice
{
GuidanceVoice_M::GuidanceVoiceValues value;
//const string type ="actuator";
//const string description="Navigation guidance state that was selected.";
};
module _Map
{
struct IsAutoScaleModeUsed
{
boolean value;
//const string type ="actuator";
//const string description="Used to select auto-scaling mode. This feature dynamically adjusts the zoom level of the map to provide an optimal view based on the current speed of the vehicle";
};
};

};

module HMI
{
struct CurrentLanguage
{
string value;
//const string type ="sensor";
//const string description="ISO 639-1 standard language code for the current HMI";
};
module FontSize_M
{
enum FontSizeValues{STANDARD,LARGE,EXTRA_LARGE};
};
struct FontSize
{
FontSize_M::FontSizeValues value;
//const string type ="actuator";
//const string description="Font size used in the current HMI";
};
module DateFormat_M
{
enum DateFormatValues{YYYY_MM_DD,DD_MM_YYYY,MM_DD_YYYY,YY_MM_DD,DD_MM_YY,MM_DD_YY};
};
struct DateFormat
{
DateFormat_M::DateFormatValues value;
//const string type ="actuator";
//const string description="Date format used in the current HMI";
};
module TimeFormat_M
{
enum TimeFormatValues{HR_12,HR_24};
};
struct TimeFormat
{
TimeFormat_M::TimeFormatValues value;
//const string type ="actuator";
//const string description="Time format used in the current HMI";
};
module DistanceUnit_M
{
enum DistanceUnitValues{MILES,KILOMETERS};
};
struct DistanceUnit
{
DistanceUnit_M::DistanceUnitValues value;
//const string type ="actuator";
//const string description="Distance unit used in the current HMI";
};
module FuelVolumeUnit_M
{
enum FuelVolumeUnitValues{LITER,GALLON_US,GALLON_UK};
};
struct FuelVolumeUnit
{
FuelVolumeUnit_M::FuelVolumeUnitValues value;
//const string type ="actuator";
//const string description="Fuel volume unit used in the current HMI";
};
module FuelEconomyUnits_M
{
enum FuelEconomyUnitsValues{MPG_UK,MPG_US,MILES_PER_LITER,KILOMETERS_PER_LITER,LITERS_PER_100_KILOMETERS};
};
struct FuelEconomyUnits
{
FuelEconomyUnits_M::FuelEconomyUnitsValues value;
//const string type ="actuator";
//const string description="Fuel economy unit used in the current HMI";
};
module EVEconomyUnits_M
{
enum EVEconomyUnitsValues{MILES_PER_KILOWATT_HOUR,KILOMETERS_PER_KILOWATT_HOUR,KILOWATT_HOURS_PER_100_MILES,KILOWATT_HOURS_PER_100_KILOMETERS,WATT_HOURS_PER_MILE,WATT_HOURS_PER_KILOMETER};
};
struct EVEconomyUnits
{
EVEconomyUnits_M::EVEconomyUnitsValues value;
//const string type ="actuator";
//const string description="EV fuel economy unit used in the current HMI";
};
module TemperatureUnit_M
{
enum TemperatureUnitValues{C,F};
};
struct TemperatureUnit
{
TemperatureUnit_M::TemperatureUnitValues value;
//const string type ="actuator";
//const string description="Temperature unit used in the current HMI";
};
module TirePressureUnit_M
{
enum TirePressureUnitValues{PSI,KPA,BAR};
};
struct TirePressureUnit
{
TirePressureUnit_M::TirePressureUnitValues value;
//const string type ="actuator";
//const string description="Tire pressure unit used in the current HMI";
};
module SpeedUnit_M
{
enum SpeedUnitValues{METERS_PER_SECOND,MILES_PER_HOUR,KILOMETERS_PER_HOUR};
};
struct SpeedUnit
{
SpeedUnit_M::SpeedUnitValues value;
//const string type ="actuator";
//const string description="Speed unit used in the current HMI";
};
module EVEnergyUnits_M
{
enum EVEnergyUnitsValues{WATT_HOURS,AMPERE_HOURS,KILOWATT_HOURS};
};
struct EVEnergyUnits
{
EVEnergyUnits_M::EVEnergyUnitsValues value;
//const string type ="actuator";
//const string description="EV energy unit used in the current HMI";
};
struct Brightness
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Brightness of the HMI, relative to supported range. 0 = Lowest brightness possible. 100 = Maximum Brightness possible.";
};
module DayNightMode_M
{
enum DayNightModeValues{DAY,NIGHT};
};
struct DayNightMode
{
DayNightMode_M::DayNightModeValues value;
//const string type ="actuator";
//const string description="Current display theme";
};
struct IsScreenAlwaysOn
{
boolean value;
//const string type ="actuator";
//const string description="Used to prevent the screen going black if no action placed.";
};
struct LastActionTime
{
string value;
//const string unit="iso8601";
//const string type ="sensor";
//const string description="Time for last hmi action, formatted according to ISO 8601 with UTC time zone.";
};
struct DisplayOffDuration
{
unsigned short value;
//const string unit="s";
//const string type ="actuator";
//const string description="Duration in seconds before the display is turned off. Value shall be 0 if screen never shall turn off.";
};
};

module SmartphoneProjection
{
module Active_M
{
enum ActiveValues{NONE,ACTIVE,INACTIVE};
};
struct Active
{
Active_M::ActiveValues value;
//const string type ="actuator";
//const string description="Projection activation info.";
};
module Source_M
{
enum SourceValues{USB,BLUETOOTH,WIFI};
};
struct Source
{
Source_M::SourceValues value;
//const string type ="actuator";
//const string description="Connectivity source selected for projection.";
};
module SupportedMode_M
{
enum SupportedModeValues{ANDROID_AUTO,APPLE_CARPLAY,MIRROR_LINK,OTHER};
};
struct SupportedMode
{
SupportedMode_M::SupportedModeValues value;
//const string type ="attribute";
//const string description="Supportable list for projection.";
};
};

module SmartphoneScreenMirroring
{
module Active_M
{
enum ActiveValues{NONE,ACTIVE,INACTIVE};
};
struct Active
{
Active_M::ActiveValues value;
//const string type ="actuator";
//const string description="Mirroring activation info.";
};
module Source_M
{
enum SourceValues{USB,BLUETOOTH,WIFI};
};
struct Source
{
Source_M::SourceValues value;
//const string type ="actuator";
//const string description="Connectivity source selected for mirroring.";
};
};

struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module Sunroof
{
struct Position
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Sunroof position. 0 = Fully closed 100 = Fully opened. -100 = Fully tilted.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN,TILT_UP,TILT_DOWN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or shade.";
};
module Shade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

};

module RearviewMirror
{
struct DimmingLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Dimming level of rear-view mirror. 0 = Undimmed. 100 = Fully dimmed.";
};
};

module Light
{
struct IsGloveBoxOn
{
boolean value;
//const string type ="actuator";
//const string description="Is glove box light on";
};
struct IsDomeOn
{
boolean value;
//const string type ="actuator";
//const string description="Is central dome light on";
};
struct PerceivedAmbientLight
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="The percentage of ambient light that is measured (e.g., by a sensor) inside the cabin. 0 = No ambient light. 100 = Full brightness.";
};
module Spotlight
{
module Row1
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

module Row2
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

module Row3
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

module Row4
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

};

module AmbientLight
{
module Row1
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

module Row2
{
module DriverSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

module PassengerSide
{
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

};

module InteractiveLightBar
{
struct Effect
{
string value;
//const string type ="actuator";
//const string description="Light effect selection from a predefined set of allowed values.";
};
struct IsLightOn
{
boolean value;
//const string type ="actuator";
//const string description="Indicates whether the light is turned on. True = On, False = Off.";
};
struct Intensity
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="How much of the maximum possible brightness of the light is used. 1 = Maximum attenuation, 100 = No attenuation (i.e. full brightness).";
};
struct Color
{
string value;
//const string type ="actuator";
//const string description="Hexadecimal color code represented as a 3-byte RGB (i.e. Red, Green, and Blue) value preceded by a hash symbol "#". Allowed range "#000000" to "#FFFFFF".";
};
};

};

module Door
{
module Row1
{
module DriverSide
{
module Window
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsChildLockActive
{
boolean value;
//const string type ="sensor";
//const string description="Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.";
};
module Shade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

module PassengerSide
{
module Window
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsChildLockActive
{
boolean value;
//const string type ="sensor";
//const string description="Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.";
};
module Shade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

};

module Row2
{
module DriverSide
{
module Window
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsChildLockActive
{
boolean value;
//const string type ="sensor";
//const string description="Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.";
};
module Shade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

module PassengerSide
{
module Window
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsChildLockActive
{
boolean value;
//const string type ="sensor";
//const string description="Is door child lock active. True = Door cannot be opened from inside. False = Door can be opened from inside.";
};
module Shade
{
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

struct IsLocked
{
boolean value;
//const string type ="actuator";
//const string description="Is item locked or unlocked. True = Locked. False = Unlocked.";
};
struct IsOpen
{
boolean value;
//const string type ="actuator";
//const string description="Is item open or closed? True = Fully or partially open. False = Fully closed.";
};
struct Position
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Item position. 0 = Start position 100 = End position.";
};
module _Switch_M
{
enum _SwitchValues{INACTIVE,CLOSE,OPEN,ONE_SHOT_CLOSE,ONE_SHOT_OPEN};
};
struct _Switch
{
_Switch_M::_SwitchValues value;
//const string type ="actuator";
//const string description="Switch controlling sliding action such as window, sunroof, or blind.";
};
};

};

};

struct DoorCount
{
octet value;
//const string type ="attribute";
//const string description="Number of doors in vehicle.";
};
struct IsWindowChildLockEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is window child lock engaged. True = Engaged. False = Disengaged.";
};
module Seat
{
module Row1
{
module DriverSide
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

module Middle
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

module PassengerSide
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

};

module Row2
{
module DriverSide
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

module Middle
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

module PassengerSide
{
struct IsOccupied
{
boolean value;
//const string type ="sensor";
//const string description="Does the seat have a passenger in it.";
};
module Occupant
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

};

struct IsBelted
{
boolean value;
//const string type ="sensor";
//const string description="Is the belt engaged.";
};
struct SeatBeltHeight
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat belt position on vehicle z-axis. Position is relative within available movable range of the seat belt. 0 = Lowermost position supported.";
};
struct Massage
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct MassageLevel
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Seat massage level. 0 = off. 100 = max massage.";
};
struct Position
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle x-axis. Position is relative to the frontmost position supported by the seat. 0 = Frontmost position supported.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Seat position on vehicle z-axis. Position is relative within available movable range of the seating. 0 = Lowermost position supported.";
};
struct Tilt
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Tilting of seat (seating and backrest) relative to vehicle x-axis. 0 = seat bottom is flat, seat bottom and vehicle x-axis are parallel. Positive degrees = seat tilted backwards, seat x-axis tilted upward, seat z-axis is tilted backward.";
};
module Backrest
{
struct Recline
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Backrest recline compared to seat z-axis (seat vertical axis). 0 degrees = Upright/Vertical backrest. Negative degrees for forward recline. Positive degrees for backward recline.";
};
module Lumbar
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
};

struct LumbarSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Lumbar support (in/out position). 0 = Innermost position. 100 = Outermost position.";
};
struct LumbarHeight
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Height of lumbar support. Position is relative within available movable range of the lumbar support. 0 = Lowermost position supported.";
};
module SideBolster
{
struct Support
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
};

struct SideBolsterSupport
{
float value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Side bolster support. 0 = Minimum support (widest side bolster setting). 100 = Maximum support.";
};
struct IsReclineForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged.";
};
struct IsReclineBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged.";
};
struct IsMoreLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged.";
};
struct IsLessLumbarSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged.";
};
struct IsLumbarUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged.";
};
struct IsLumbarDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged.";
};
struct IsMoreSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged.";
};
struct IsLessSideBolsterSupportSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged.";
};
};

module Seating
{
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Length adjustment of seating. 0 = Adjustable part of seating in rearmost position (Shortest length of seating).";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged.";
};
};

module Headrest
{
struct Height
{
octet value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Position of headrest relative to movable range of the head rest. 0 = Bottommost position supported.";
};
struct Angle
{
float value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Headrest angle, relative to backrest, 0 degrees if parallel to backrest, Positive degrees = tilted forward.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged.";
};
};

module Airbag
{
struct IsDeployed
{
boolean value;
//const string type ="sensor";
//const string description="Airbag deployment status. True = Airbag deployed. False = Airbag not deployed.";
};
};

module _Switch
{
struct IsWarmerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater (SingleSeat.Heating).";
};
struct IsCoolerEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater (SingleSeat.Heating).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged (SingleSeat.Position).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged (SingleSeat.Position).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged (SingleSeat.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged (SingleSeat.Height).";
};
struct IsTiltForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged (SingleSeat.Tilt).";
};
struct IsTiltBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged (SingleSeat.Tilt).";
};
module Backrest
{
struct IsReclineForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline forward switch engaged (SingleSeat.Backrest.Recline).";
};
struct IsReclineBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Backrest recline backward switch engaged (SingleSeat.Backrest.Recline).";
};
module Lumbar
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less lumbar support engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar up switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Lumbar down switch engaged (SingleSeat.Backrest.Lumbar.Support).";
};
};

module SideBolster
{
struct IsMoreSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for more side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
struct IsLessSupportEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch for less side bolster support engaged (SingleSeat.Backrest.SideBolster.Support).";
};
};

};

module Seating
{
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to increase seating length engaged (SingleSeat.Seating.Length).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Is switch to decrease seating length engaged (SingleSeat.Seating.Length).";
};
};

module Headrest
{
struct IsUpEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest up switch engaged (SingleSeat.Headrest.Height).";
};
struct IsDownEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest down switch engaged (SingleSeat.Headrest.Height).";
};
struct IsForwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest forward switch engaged (SingleSeat.Headrest.Angle).";
};
struct IsBackwardEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Head rest backward switch engaged (SingleSeat.Headrest.Angle).";
};
};

module Massage
{
struct IsIncreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged (SingleSeat.Massage).";
};
struct IsDecreaseEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged (SingleSeat.Massage).";
};
};

};

struct IsWarmerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Warmer switch for Seat heater.";
};
struct IsCoolerSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Cooler switch for Seat heater.";
};
struct IsForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat forward switch engaged.";
};
struct IsBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat backward switch engaged.";
};
struct IsUpSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat up switch engaged.";
};
struct IsDownSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Seat down switch engaged.";
};
struct IsTiltForwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt forward switch engaged.";
};
struct IsTiltBackwardSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Tilt backward switch engaged.";
};
struct IsIncreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Increase massage level switch engaged.";
};
struct IsDecreaseMassageLevelSwitchEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Decrease massage level switch engaged.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

};

};

module DriverPosition_M
{
enum DriverPositionValues{LEFT,MIDDLE,RIGHT};
};
struct DriverPosition
{
DriverPosition_M::DriverPositionValues value;
//const string type ="attribute";
//const string description="The position of the driver seat in row 1.";
};
struct SeatRowCount
{
octet value;
//const string type ="attribute";
//const string description="Number of seat rows in vehicle.";
};
struct SeatPosCount
{
sequence<octet> value;
//const string type ="attribute";
//const string description="Number of seats across each row from the front to the rear.";
};
module Convertible
{
module Status_M
{
enum StatusValues{UNDEFINED,CLOSED,OPEN,CLOSING,OPENING,STALLED};
};
struct Status
{
Status_M::StatusValues value;
//const string type ="sensor";
//const string description="Roof status on convertible vehicles.";
};
};

struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module ADAS
{
module ActiveAutonomyLevel_M
{
enum ActiveAutonomyLevelValues{SAE_0,SAE_1,SAE_2_DISENGAGING,SAE_2,SAE_3_DISENGAGING,SAE_3,SAE_4_DISENGAGING,SAE_4,SAE_5_DISENGAGING,SAE_5};
};
struct ActiveAutonomyLevel
{
ActiveAutonomyLevel_M::ActiveAutonomyLevelValues value;
//const string type ="sensor";
//const string description="Indicates the currently active level of driving automation according to the SAE J3016 (Taxonomy and Definitions for Terms Related to Driving Automation Systems for On-Road Motor Vehicles).";
};
module SupportedAutonomyLevel_M
{
enum SupportedAutonomyLevelValues{SAE_0,SAE_1,SAE_2,SAE_3,SAE_4,SAE_5};
};
struct SupportedAutonomyLevel
{
SupportedAutonomyLevel_M::SupportedAutonomyLevelValues value;
//const string type ="attribute";
//const string description="Indicates the highest level of driving automation according to the SAE J3016 taxonomy the vehicle is capable of.";
};
module CruiseControl
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if cruise control system is enabled (e.g. ready to receive configurations and settings) True = Enabled. False = Disabled.";
};
struct IsActive
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if cruise control system is active (i.e. actively controls speed). True = Active. False = Inactive.";
};
struct SpeedSet
{
float value;
//const string unit="km/h";
//const string type ="actuator";
//const string description="Set cruise control speed in kilometers per hour.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if cruise control system incurred an error condition. True = Error. False = No Error.";
};
struct IsAdaptive
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if cruise control system is adaptive (i.e. actively controls speed).";
};
struct AdaptiveDistanceSet
{
float value;
//const string unit="m";
//const string type ="actuator";
//const string description="Distance in meters to keep from lead vehicle";
};
struct AdaptiveIntervalSet
{
octet value;
//const string type ="actuator";
//const string description="Follow distance setting, commonly 1-5 with 1 being closest.";
};
};

module LaneDepartureDetection
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if lane departure detection system is enabled. True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if lane departure detection registered a lane departure.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if lane departure system incurred an error condition. True = Error. False = No Error.";
};
};

module ObstacleDetection
{
module Front
{
module Left
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

module Center
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

module Right
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

};

module Rear
{
module Left
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

module Center
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

module Right
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if obstacle sensor system is enabled (i.e. monitoring for obstacles). True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system registered an obstacle.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if obstacle sensor system incurred an error condition. True = Error. False = No Error.";
};
struct Distance
{
float value;
//const string unit="m";
//const string type ="sensor";
//const string description="Distance in meters to detected object";
};
struct TimeGap
{
unsigned long value;
//const string unit="ms";
//const string type ="sensor";
//const string description="Time in milliseconds before potential impact object";
};
module WarningType_M
{
enum WarningTypeValues{UNDEFINED,CROSS_TRAFFIC,BLIND_SPOT};
};
struct WarningType
{
WarningType_M::WarningTypeValues value;
//const string type ="sensor";
//const string description="Indicates the type of obstacle warning detected as some track not only the presence of an obstacle but potential intercepting trajectory or other characteristics.";
};
};

};

};

module ABS
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if ABS is enabled. True = Enabled. False = Disabled.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if ABS incurred an error condition. True = Error. False = No Error.";
};
struct IsEngaged
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if ABS is currently regulating brake pressure. True = Engaged. False = Not Engaged.";
};
};

module TCS
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if TCS is enabled. True = Enabled. False = Disabled.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if TCS incurred an error condition. True = Error. False = No Error.";
};
struct IsEngaged
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if TCS is currently regulating traction. True = Engaged. False = Not Engaged.";
};
};

module ESC
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if ESC is enabled. True = Enabled. False = Disabled.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if ESC incurred an error condition. True = Error. False = No Error.";
};
struct IsEngaged
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if ESC is currently regulating vehicle stability. True = Engaged. False = Not Engaged.";
};
struct IsStrongCrossWindDetected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if the ESC system is detecting strong cross winds. True = Strong cross winds detected. False = No strong cross winds detected.";
};
module RoadFriction
{
struct MostProbable
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Most probable road friction, as calculated by the ESC system. Exact meaning of most probable is implementation specific. 0 = no friction, 100 = maximum friction.";
};
struct LowerBound
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Lower bound road friction, as calculated by the ESC system. 5% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.";
};
struct UpperBound
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Upper bound road friction, as calculated by the ESC system. 95% possibility that road friction is below this value. 0 = no friction, 100 = maximum friction.";
};
};

};

module EBD
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if EBD is enabled. True = Enabled. False = Disabled.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if EBD incurred an error condition. True = Error. False = No Error.";
};
struct IsEngaged
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if EBD is currently regulating vehicle brakeforce distribution. True = Engaged. False = Not Engaged.";
};
};

module EBA
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if EBA is enabled. True = Enabled. False = Disabled.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if EBA incurred an error condition. True = Error. False = No Error.";
};
struct IsEngaged
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if EBA is currently regulating brake pressure. True = Engaged. False = Not Engaged.";
};
};

module DMS
{
struct IsEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if DMS is enabled. True = Enabled. False = Disabled.";
};
struct IsWarning
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if DMS has registered a driver alert condition.";
};
struct IsError
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if DMS incurred an error condition. True = Error. False = No Error.";
};
};

struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
};

module Chassis
{
struct Wheelbase
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall wheelbase, in mm.";
};
module Axle
{
module Row1
{
struct TreadWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.";
};
struct TrackWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.";
};
struct AxleWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the wheel mounting faces, measured along the spindle axis.";
};
struct WheelCount
{
octet value;
//const string type ="attribute";
//const string description="Number of wheels on the axle";
};
struct WheelDiameter
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.";
};
struct WheelWidth
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.";
};
struct SteeringAngle
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.";
};
struct TireDiameter
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Outer diameter of tires, in inches, as per ETRTO / TRA standard.";
};
struct TireWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Nominal section width of tires, in mm, as per ETRTO / TRA standard.";
};
struct TireAspectRatio
{
octet value;
//const string unit="percent";
//const string type ="attribute";
//const string description="Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.";
};
module Wheel
{
module Left
{
module Brake
{
struct FluidLevel
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake fluid level as percent. 0 = Empty. 100 = Full.";
};
struct IsFluidLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.";
};
struct PadWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake pad wear as percent. 0 = No Wear. 100 = Worn.";
};
struct IsBrakesWorn
{
boolean value;
//const string type ="sensor";
//const string description="Brake pad wear status. True = Worn. False = Not Worn.";
};
};

module Tire
{
struct Pressure
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Tire pressure in kilo-Pascal.";
};
struct IsPressureLow
{
boolean value;
//const string type ="sensor";
//const string description="Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Tire temperature in Celsius.";
};
};

struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Linear speed of a vehicle's wheel.";
};
struct AngularSpeed
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Angular (Rotational) speed of a vehicle's wheel.";
};
};

module Right
{
module Brake
{
struct FluidLevel
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake fluid level as percent. 0 = Empty. 100 = Full.";
};
struct IsFluidLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.";
};
struct PadWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake pad wear as percent. 0 = No Wear. 100 = Worn.";
};
struct IsBrakesWorn
{
boolean value;
//const string type ="sensor";
//const string description="Brake pad wear status. True = Worn. False = Not Worn.";
};
};

module Tire
{
struct Pressure
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Tire pressure in kilo-Pascal.";
};
struct IsPressureLow
{
boolean value;
//const string type ="sensor";
//const string description="Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Tire temperature in Celsius.";
};
};

struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Linear speed of a vehicle's wheel.";
};
struct AngularSpeed
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Angular (Rotational) speed of a vehicle's wheel.";
};
};

};

};

module Row2
{
struct TreadWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the centerlines of the base tires at ground, including camber angle. If there are dual rear wheels, measure from the midway points between the inner and outer tires.";
};
struct TrackWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the centers of the wheels, measured along the spindle, or axle axis. If there are dual rear wheels, measure from the midway points between the inner and outer tires.";
};
struct AxleWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="The lateral distance between the wheel mounting faces, measured along the spindle axis.";
};
struct WheelCount
{
octet value;
//const string type ="attribute";
//const string description="Number of wheels on the axle";
};
struct WheelDiameter
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Diameter of wheels (rims without tires), in inches, as per ETRTO / TRA standard.";
};
struct WheelWidth
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Width of wheels (rims without tires), in inches, as per ETRTO / TRA standard.";
};
struct SteeringAngle
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Single track two-axle model steering angle. Angle according to ISO 8855. Positive = degrees to the left. Negative = degrees to the right.";
};
struct TireDiameter
{
float value;
//const string unit="inch";
//const string type ="attribute";
//const string description="Outer diameter of tires, in inches, as per ETRTO / TRA standard.";
};
struct TireWidth
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Nominal section width of tires, in mm, as per ETRTO / TRA standard.";
};
struct TireAspectRatio
{
octet value;
//const string unit="percent";
//const string type ="attribute";
//const string description="Aspect ratio between tire section height and tire section width, as per ETRTO / TRA standard.";
};
module Wheel
{
module Left
{
module Brake
{
struct FluidLevel
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake fluid level as percent. 0 = Empty. 100 = Full.";
};
struct IsFluidLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.";
};
struct PadWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake pad wear as percent. 0 = No Wear. 100 = Worn.";
};
struct IsBrakesWorn
{
boolean value;
//const string type ="sensor";
//const string description="Brake pad wear status. True = Worn. False = Not Worn.";
};
};

module Tire
{
struct Pressure
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Tire pressure in kilo-Pascal.";
};
struct IsPressureLow
{
boolean value;
//const string type ="sensor";
//const string description="Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Tire temperature in Celsius.";
};
};

struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Linear speed of a vehicle's wheel.";
};
struct AngularSpeed
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Angular (Rotational) speed of a vehicle's wheel.";
};
};

module Right
{
module Brake
{
struct FluidLevel
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake fluid level as percent. 0 = Empty. 100 = Full.";
};
struct IsFluidLevelLow
{
boolean value;
//const string type ="sensor";
//const string description="Brake fluid level status. True = Brake fluid level low. False = Brake fluid level OK.";
};
struct PadWear
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake pad wear as percent. 0 = No Wear. 100 = Worn.";
};
struct IsBrakesWorn
{
boolean value;
//const string type ="sensor";
//const string description="Brake pad wear status. True = Worn. False = Not Worn.";
};
};

module Tire
{
struct Pressure
{
unsigned short value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="Tire pressure in kilo-Pascal.";
};
struct IsPressureLow
{
boolean value;
//const string type ="sensor";
//const string description="Tire Pressure Status. True = Low tire pressure. False = Good tire pressure.";
};
struct Temperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Tire temperature in Celsius.";
};
};

struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Linear speed of a vehicle's wheel.";
};
struct AngularSpeed
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Angular (Rotational) speed of a vehicle's wheel.";
};
};

};

};

};

struct AxleCount
{
octet value;
//const string type ="attribute";
//const string description="Number of axles on the vehicle";
};
module ParkingBrake
{
struct IsEngaged
{
boolean value;
//const string type ="actuator";
//const string description="Parking brake status. True = Parking Brake is Engaged. False = Parking Brake is not Engaged.";
};
struct IsAutoApplyEnabled
{
boolean value;
//const string type ="actuator";
//const string description="Indicates if parking brake will be automatically engaged when the vehicle engine is turned off.";
};
};

module SteeringWheel
{
struct Angle
{
short value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Steering wheel angle. Positive = degrees to the left. Negative = degrees to the right.";
};
struct Tilt
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Steering wheel column tilt. 0 = Lowest position. 100 = Highest position.";
};
struct Extension
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Steering wheel column extension from dashboard. 0 = Closest to dashboard. 100 = Furthest from dashboard.";
};
struct HeatingCooling
{
octet value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Heating or Cooling requsted for the Item. -100 = Maximum cooling, 0 = Heating/cooling deactivated, 100 = Maximum heating.";
};
};

module Accelerator
{
struct PedalPosition
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Accelerator pedal position as percent. 0 = Not depressed. 100 = Fully depressed.";
};
};

module Brake
{
struct PedalPosition
{
octet value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Brake pedal position as percent. 0 = Not depressed. 100 = Fully depressed.";
};
struct IsDriverEmergencyBrakingDetected
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if emergency braking initiated by driver is detected. True = Emergency braking detected. False = Emergency braking not detected.";
};
};

};

module OBD
{
module PidsA_M
{
enum PidsAValues{d01,d02,d03,d04,d05,d06,d07,d08,d09,d0A,d0B,d0C,d0D,d0E,d0F,d10,d11,d12,d13,d14,d15,d16,d17,d18,d19,d1A,d1B,d1C,d1D,d1E,d1F,d20};
};
struct PidsA
{
PidsA_M::PidsAValues value;
//const string type ="attribute";
//const string description="PID 00 - Array of the supported PIDs 01 to 20 in Hexadecimal.";
};
module PidsB_M
{
enum PidsBValues{d21,d22,d23,d24,d25,d26,d27,d28,d29,d2A,d2B,d2C,d2D,d2E,d2F,d30,d31,d32,d33,d34,d35,d36,d37,d38,d39,d3A,d3B,d3C,d3D,d3E,d3F,d40};
};
struct PidsB
{
PidsB_M::PidsBValues value;
//const string type ="attribute";
//const string description="PID 20 - Array of the supported PIDs 21 to 40 in Hexadecimal.";
};
module PidsC_M
{
enum PidsCValues{d41,d42,d43,d44,d45,d46,d47,d48,d49,d4A,d4B,d4C,d4D,d4E,d4F,d50,d51,d52,d53,d54,d55,d56,d57,d58,d59,d5A,d5B,d5C,d5D,d5E,d5F,d60};
};
struct PidsC
{
PidsC_M::PidsCValues value;
//const string type ="attribute";
//const string description="PID 40 - Array of the supported PIDs 41 to 60 in Hexadecimal.";
};
module Status
{
struct IsMILOn
{
boolean value;
//const string type ="sensor";
//const string description="Malfunction Indicator Light (MIL) False = Off, True = On";
};
struct DTCCount
{
octet value;
//const string type ="sensor";
//const string description="Number of Diagnostic Trouble Codes (DTC)";
};
module IgnitionType_M
{
enum IgnitionTypeValues{SPARK,COMPRESSION};
};
struct IgnitionType
{
IgnitionType_M::IgnitionTypeValues value;
//const string type ="attribute";
//const string description="Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)";
};
};

struct DTCList
{
sequence<string> value;
//const string type ="sensor";
//const string description="List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )";
};
struct FreezeDTC
{
string value;
//const string type ="sensor";
//const string description="PID 02 - DTC that triggered the freeze frame";
};
struct FuelStatus
{
string value;
//const string type ="sensor";
//const string description="PID 03 - Fuel status";
};
struct EngineLoad
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 04 - Engine load in percent - 0 = no load, 100 = full load";
};
struct CoolantTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 05 - Coolant temperature";
};
struct ShortTermFuelTrim1
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 06 - Short Term (immediate) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer";
};
struct LongTermFuelTrim1
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 07 - Long Term (learned) Fuel Trim - Bank 1 - negative percent leaner, positive percent richer";
};
struct ShortTermFuelTrim2
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 08 - Short Term (immediate) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer";
};
struct LongTermFuelTrim2
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 09 - Long Term (learned) Fuel Trim - Bank 2 - negative percent leaner, positive percent richer";
};
struct FuelPressure
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 0A - Fuel pressure";
};
struct _MAP
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 0B - Intake manifold pressure";
};
struct EngineSpeed
{
float value;
//const string unit="rpm";
//const string type ="sensor";
//const string description="PID 0C - Engine speed measured as rotations per minute";
};
struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="PID 0D - Vehicle speed";
};
struct TimingAdvance
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="PID 0E - Time advance";
};
struct IntakeTemp
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 0F - Intake temperature";
};
struct MAF
{
float value;
//const string unit="g/s";
//const string type ="sensor";
//const string description="PID 10 - Grams of air drawn into engine per second";
};
struct ThrottlePosition
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 11 - Throttle position - 0 = closed throttle, 100 = open throttle";
};
struct AirStatus
{
string value;
//const string type ="sensor";
//const string description="PID 12 - Secondary air status";
};
struct OxygenSensorsIn2Banks
{
octet value;
//const string type ="sensor";
//const string description="PID 13 - Presence of oxygen sensors in 2 banks. [A0..A3] == Bank 1, Sensors 1-4. [A4..A7] == Bank 2, Sensors 1-4";
};
module O2
{
module Sensor1
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor2
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor3
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor4
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor5
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor6
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor7
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

module Sensor8
{
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 1x (byte A) - Sensor voltage";
};
struct ShortTermFuelTrim
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 1x (byte B) - Short term fuel trim";
};
};

};

struct OBDStandards
{
octet value;
//const string type ="attribute";
//const string description="PID 1C - OBD standards this vehicle conforms to";
};
struct OxygenSensorsIn4Banks
{
octet value;
//const string type ="sensor";
//const string description="PID 1D - Presence of oxygen sensors in 4 banks. Similar to PID 13, but [A0..A7] == [B1S1, B1S2, B2S1, B2S2, B3S1, B3S2, B4S1, B4S2]";
};
struct IsPTOActive
{
boolean value;
//const string type ="sensor";
//const string description="PID 1E - Auxiliary input status (power take off)";
};
struct RunTime
{
float value;
//const string unit="s";
//const string type ="sensor";
//const string description="PID 1F - Engine run time";
};
struct DistanceWithMIL
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="PID 21 - Distance traveled with MIL on";
};
struct FuelRailPressureVac
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 22 - Fuel rail pressure relative to vacuum";
};
struct FuelRailPressureDirect
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 23 - Fuel rail pressure direct inject";
};
module O2WR
{
module Sensor1
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor2
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor3
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor4
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor5
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor6
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor7
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

module Sensor8
{
struct Lambda
{
float value;
//const string type ="sensor";
//const string description="PID 2x (byte AB) and PID 3x (byte AB) - Lambda for wide range/band oxygen sensor";
};
struct Voltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 2x (byte CD) - Voltage for wide range/band oxygen sensor";
};
struct Current
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="PID 3x (byte CD) - Current for wide range/band oxygen sensor";
};
};

};

struct CommandedEGR
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 2C - Commanded exhaust gas recirculation (EGR)";
};
struct EGRError
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 2D - Exhaust gas recirculation (EGR) error";
};
struct CommandedEVAP
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 2E - Commanded evaporative purge (EVAP) valve";
};
struct FuelLevel
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 2F - Fuel level in the fuel tank";
};
struct WarmupsSinceDTCClear
{
octet value;
//const string type ="sensor";
//const string description="PID 30 - Number of warm-ups since codes cleared";
};
struct DistanceSinceDTCClear
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="PID 31 - Distance traveled since codes cleared";
};
struct EVAPVaporPressure
{
float value;
//const string unit="Pa";
//const string type ="sensor";
//const string description="PID 32 - Evaporative purge (EVAP) system pressure";
};
struct BarometricPressure
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 33 - Barometric pressure";
};
module Catalyst
{
module Bank1
{
struct Temperature1
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 3C - Catalyst temperature from bank 1, sensor 1";
};
struct Temperature2
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 3E - Catalyst temperature from bank 1, sensor 2";
};
};

module Bank2
{
struct Temperature1
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 3D - Catalyst temperature from bank 2, sensor 1";
};
struct Temperature2
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 3F - Catalyst temperature from bank 2, sensor 2";
};
};

};

module DriveCycleStatus
{
struct IsMILOn
{
boolean value;
//const string type ="sensor";
//const string description="Malfunction Indicator Light (MIL) - False = Off, True = On";
};
struct DTCCount
{
octet value;
//const string type ="sensor";
//const string description="Number of sensor Trouble Codes (DTC)";
};
module IgnitionType_M
{
enum IgnitionTypeValues{SPARK,COMPRESSION};
};
struct IgnitionType
{
IgnitionType_M::IgnitionTypeValues value;
//const string type ="sensor";
//const string description="Type of the ignition for ICE - spark = spark plug ignition, compression = self-igniting (Diesel engines)";
};
};

struct ControlModuleVoltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="PID 42 - Control module voltage";
};
struct AbsoluteLoad
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 43 - Absolute load value";
};
struct CommandedEquivalenceRatio
{
float value;
//const string unit="ratio";
//const string type ="sensor";
//const string description="PID 44 - Commanded equivalence ratio";
};
struct RelativeThrottlePosition
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 45 - Relative throttle position";
};
struct AmbientAirTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 46 - Ambient air temperature";
};
struct ThrottlePositionB
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 47 - Absolute throttle position B";
};
struct ThrottlePositionC
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 48 - Absolute throttle position C";
};
struct AcceleratorPositionD
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 49 - Accelerator pedal position D";
};
struct AcceleratorPositionE
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 4A - Accelerator pedal position E";
};
struct AcceleratorPositionF
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 4B - Accelerator pedal position F";
};
struct ThrottleActuator
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 4C - Commanded throttle actuator";
};
struct RunTimeMIL
{
float value;
//const string unit="min";
//const string type ="sensor";
//const string description="PID 4D - Run time with MIL on";
};
struct TimeSinceDTCCleared
{
float value;
//const string unit="min";
//const string type ="sensor";
//const string description="PID 4E - Time since trouble codes cleared";
};
struct MaxMAF
{
float value;
//const string unit="g/s";
//const string type ="sensor";
//const string description="PID 50 - Maximum flow for mass air flow sensor";
};
struct FuelType
{
octet value;
//const string type ="attribute";
//const string description="PID 51 - Fuel type";
};
struct EthanolPercent
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 52 - Percentage of ethanol in the fuel";
};
struct EVAPVaporPressureAbsolute
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 53 - Absolute evaporative purge (EVAP) system pressure";
};
struct EVAPVaporPressureAlternate
{
float value;
//const string unit="Pa";
//const string type ="sensor";
//const string description="PID 54 - Alternate evaporative purge (EVAP) system pressure";
};
struct ShortTermO2Trim1
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 55 (byte A) - Short term secondary O2 trim - Bank 1";
};
struct ShortTermO2Trim3
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 55 (byte B) - Short term secondary O2 trim - Bank 3";
};
struct LongTermO2Trim1
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 56 (byte A) - Long term secondary O2 trim - Bank 1";
};
struct LongTermO2Trim3
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 56 (byte B) - Long term secondary O2 trim - Bank 3";
};
struct ShortTermO2Trim2
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 57 (byte A) - Short term secondary O2 trim - Bank 2";
};
struct ShortTermO2Trim4
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 57 (byte B) - Short term secondary O2 trim - Bank 4";
};
struct LongTermO2Trim2
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 58 (byte A) - Long term secondary O2 trim - Bank 2";
};
struct LongTermO2Trim4
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 58 (byte B) - Long term secondary O2 trim - Bank 4";
};
struct FuelRailPressureAbsolute
{
float value;
//const string unit="kPa";
//const string type ="sensor";
//const string description="PID 59 - Absolute fuel rail pressure";
};
struct RelativeAcceleratorPosition
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 5A - Relative accelerator pedal position";
};
struct HybridBatteryRemaining
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="PID 5B - Remaining life of hybrid battery";
};
struct OilTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="PID 5C - Engine oil temperature";
};
struct FuelInjectionTiming
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="PID 5D - Fuel injection timing";
};
struct FuelRate
{
float value;
//const string unit="l/h";
//const string type ="sensor";
//const string description="PID 5E - Engine fuel rate";
};
};

module Driver
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

struct DistractionLevel
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Distraction level of the driver, which can be evaluated by multiple factors e.g. driving situation, acoustical or optical signals inside the cockpit, ongoing phone calls.";
};
struct IsEyesOnRoad
{
boolean value;
//const string type ="sensor";
//const string description="Has driver the eyes on road or not?";
};
struct IsHandsOnWheel
{
boolean value;
//const string type ="sensor";
//const string description="Are the driver's hands on the steering wheel or not?";
};
struct AttentiveProbability
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Probability of attentiveness of the driver.";
};
struct FatigueLevel
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Fatigue level of the driver, which can be evaluated by multiple factors e.g. trip time, behaviour of steering, eye status.";
};
struct HeartRate
{
unsigned short value;
//const string unit="bpm";
//const string type ="sensor";
//const string description="Heart rate of the driver.";
};
};

module Occupant
{
module Row1
{
module DriverSide
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

module Middle
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

module PassengerSide
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

};

module Row2
{
module DriverSide
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

module Middle
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

module PassengerSide
{
module Identifier
{
struct Subject
{
string value;
//const string type ="sensor";
//const string description="Subject for the authentication of the occupant e.g. UserID 7331677.";
};
struct Issuer
{
string value;
//const string type ="sensor";
//const string description="Unique Issuer for the authentication of the occupant e.g. https://accounts.funcorp.com.";
};
};

module HeadPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Longitudinal position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = forward of (first) rear-axle. Negative values = backward of (first) rear-axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Lateral position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = left of rear-axle center. Negative values = right of rear-axle center.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Height position of head center measured as mid eye position on X-axis of the vehicle rear-axle coordinate system as defined by ISO 23150:2023 section 3.7.12 Mid eye position refers to the center of a line drawn between the center of the drivers eyes. Positive values = above center of rear-axle reference point. Negative values = below center of rear-axle reference point.";
};
struct Yaw
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head yaw angle, measured from the vehicle sprung mass X-axis as defined by ISO 23150:2023 to the head X-axis, around the vehicle Z-axis (right-hand rule). 0 = Head in normal position. Positive values = Head turned left. Negative values = Head turned right.";
};
struct Pitch
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head pitch angle, measured as angle from vehicle sprung mass XY-plane as defined by ISO 23150:2023 to the head X-axis. 0 = Head in normal position. Positive values = Head leaning up. Negative values = Head leaning down.";
};
struct Roll
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Head roll angle about the head X-axis (right-hand rule). 0 = Head in normal position. Positive values = Head leaning to the right. Negative values = Head leaning to the left.";
};
};

module MidEyeGaze
{
struct Azimuth
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Mid eye azimuth gaze (right-hand rule) on vehicle sprung mass Z-axis as defined by ISO 23150:2023 0 = Driver looking forward. Positive values = Driver looking at something on the left side of driver. Negative values = Driver looking at something on the right side of driver.";
};
struct Elevation
{
float value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Elevation to observed object measured as angle between vehicle sprung mass XY-plane as defined by ISO 23150:2023 at driver mid eye position and object. 0 = Driver looking at something at same height as mid eye position. Positive values = Driver looking at something above mid eye position. Negative values = Driver looking at something below mid eye position.";
};
};

};

};

};

module Exterior
{
struct AirTemperature
{
float value;
//const string unit="celsius";
//const string type ="sensor";
//const string description="Air temperature outside the vehicle.";
};
struct Humidity
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Relative humidity outside the vehicle. 0 = Dry, 100 = Air fully saturated.";
};
struct LightIntensity
{
float value;
//const string unit="percent";
//const string type ="sensor";
//const string description="Light intensity outside the vehicle. 0 = No light detected, 100 = Fully lit.";
};
};

module Service
{
struct IsServiceDue
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if vehicle needs service (of any kind). True = Service needed now or in the near future. False = No known need for service.";
};
struct DistanceToService
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="Remaining distance to service (of any kind). Negative values indicate service overdue.";
};
struct TimeToService
{
long value;
//const string unit="s";
//const string type ="sensor";
//const string description="Remaining time to service (of any kind). Negative values indicate service overdue.";
};
};

module Connectivity
{
struct IsConnectivityAvailable
{
boolean value;
//const string type ="sensor";
//const string description="Indicates if connectivity between vehicle and cloud is available. True = Connectivity is available. False = Connectivity is not available.";
};
};

module VersionVSS
{
struct Major
{
unsigned long value;
//const string type ="attribute";
//const string description="Supported Version of VSS - Major version.";
};
struct Minor
{
unsigned long value;
//const string type ="attribute";
//const string description="Supported Version of VSS - Minor version.";
};
struct Patch
{
unsigned long value;
//const string type ="attribute";
//const string description="Supported Version of VSS - Patch version.";
};
struct Label
{
string value;
//const string type ="attribute";
//const string description="Label to further describe the version.";
};
};

module VehicleIdentification
{
struct VIN
{
string value;
//const string type ="attribute";
//const string description="17-character Vehicle Identification Number (VIN) as defined by ISO 3779.";
};
struct WMI
{
string value;
//const string type ="attribute";
//const string description="3-character World Manufacturer Identification (WMI) as defined by ISO 3780.";
};
struct Brand
{
string value;
//const string type ="attribute";
//const string description="Vehicle brand or manufacturer.";
};
struct Model
{
string value;
//const string type ="attribute";
//const string description="Vehicle model.";
};
struct Year
{
unsigned short value;
//const string type ="attribute";
//const string description="Model year of the vehicle.";
};
struct AcrissCode
{
string value;
//const string type ="attribute";
//const string description="The ACRISS Car Classification Code is a code used by many car rental companies.";
};
struct BodyType
{
string value;
//const string type ="attribute";
//const string description="Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).";
};
struct DateVehicleFirstRegistered
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="The date in ISO 8601 format of the first registration of the vehicle with the respective public authorities.";
};
struct LicensePlate
{
string value;
//const string type ="attribute";
//const string description="The license plate of the vehicle.";
};
struct MeetsEmissionStandard
{
string value;
//const string type ="attribute";
//const string description="Indicates that the vehicle meets the respective emission standard.";
};
struct ProductionDate
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="The date in ISO 8601 format of production of the item, e.g. vehicle.";
};
struct PurchaseDate
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="The date in ISO 8601 format of the item e.g. vehicle was purchased by the current owner.";
};
struct VehicleModelDate
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="The release date in ISO 8601 format of a vehicle model (often used to differentiate versions of the same make and model).";
};
struct VehicleConfiguration
{
string value;
//const string type ="attribute";
//const string description="A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.";
};
struct VehicleSeatingCapacity
{
unsigned short value;
//const string type ="attribute";
//const string description="The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.";
};
struct VehicleSpecialUsage
{
string value;
//const string type ="attribute";
//const string description="Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school.";
};
struct VehicleExteriorColor
{
string value;
//const string type ="attribute";
//const string description="The main color of the exterior within the basic color palette (eg. red, blue, black, white, ...).";
};
struct VehicleInteriorColor
{
string value;
//const string type ="attribute";
//const string description="The color or color combination of the interior of the vehicle.";
};
struct VehicleInteriorType
{
string value;
//const string type ="attribute";
//const string description="The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.).";
};
struct KnownVehicleDamages
{
string value;
//const string type ="attribute";
//const string description="A textual description of known damages, both repaired and unrepaired.";
};
struct OptionalExtras
{
sequence<string> value;
//const string type ="attribute";
//const string description="Optional extras refers to all car equipment options that are not installed as standard by the manufacturer.";
};
};

module LowVoltageSystemState_M
{
enum LowVoltageSystemStateValues{UNDEFINED,LOCK,OFF,ACC,ON,START};
};
struct LowVoltageSystemState
{
LowVoltageSystemState_M::LowVoltageSystemStateValues value;
//const string type ="sensor";
//const string description="State of the supply voltage of the control units (usually 12V).";
};
module LowVoltageBattery
{
struct NominalVoltage
{
unsigned short value;
//const string unit="V";
//const string type ="attribute";
//const string description="Nominal Voltage of the battery.";
};
struct NominalCapacity
{
unsigned short value;
//const string unit="Ah";
//const string type ="attribute";
//const string description="Nominal capacity of the low voltage battery.";
};
struct CurrentVoltage
{
float value;
//const string unit="V";
//const string type ="sensor";
//const string description="Current Voltage of the low voltage battery.";
};
struct CurrentCurrent
{
float value;
//const string unit="A";
//const string type ="sensor";
//const string description="Current current flowing in/out of the low voltage battery. Positive = Current flowing in to battery, e.g. during charging or driving. Negative = Current flowing out of battery, e.g. when using the battery to start a combustion engine.";
};
};

struct Speed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Vehicle speed.";
};
struct TraveledDistance
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="Odometer reading, total distance traveled during the lifetime of the vehicle.";
};
struct TraveledDistanceSinceStart
{
float value;
//const string unit="km";
//const string type ="sensor";
//const string description="Distance traveled since start of current trip.";
};
struct StartTime
{
string value;
//const string unit="iso8601";
//const string type ="attribute";
//const string description="Start time of current or latest trip, formatted according to ISO 8601 with UTC time zone.";
};
struct TripDuration
{
float value;
//const string unit="s";
//const string type ="sensor";
//const string description="Duration of latest trip.";
};
struct TripMeterReading
{
float value;
//const string unit="km";
//const string type ="actuator";
//const string description="Trip meter reading.";
};
struct IsBrokenDown
{
boolean value;
//const string type ="sensor";
//const string description="Vehicle breakdown or any similar event causing vehicle to stop on the road, that might pose a risk to other road users. True = Vehicle broken down on the road, due to e.g. engine problems, flat tire, out of gas, brake problems. False = Vehicle not broken down.";
};
struct IsMoving
{
boolean value;
//const string type ="sensor";
//const string description="Indicates whether the vehicle is stationary or moving.";
};
struct AverageSpeed
{
float value;
//const string unit="km/h";
//const string type ="sensor";
//const string description="Average speed for the current trip.";
};
module Acceleration
{
struct Longitudinal
{
float value;
//const string unit="m/s^2";
//const string type ="sensor";
//const string description="Vehicle acceleration in X (longitudinal acceleration).";
};
struct Lateral
{
float value;
//const string unit="m/s^2";
//const string type ="sensor";
//const string description="Vehicle acceleration in Y (lateral acceleration).";
};
struct Vertical
{
float value;
//const string unit="m/s^2";
//const string type ="sensor";
//const string description="Vehicle acceleration in Z (vertical acceleration).";
};
};

module AngularVelocity
{
struct Roll
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Vehicle rotation rate along X (longitudinal).";
};
struct Pitch
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Vehicle rotation rate along Y (lateral).";
};
struct Yaw
{
float value;
//const string unit="degrees/s";
//const string type ="sensor";
//const string description="Vehicle rotation rate along Z (vertical).";
};
};

struct RoofLoad
{
short value;
//const string unit="kg";
//const string type ="attribute";
//const string description="The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.";
};
struct CargoVolume
{
float value;
//const string unit="l";
//const string type ="attribute";
//const string description="The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.";
};
struct EmissionsCO2
{
short value;
//const string unit="g/km";
//const string type ="attribute";
//const string description="The CO2 emissions.";
};
struct CurrentOverallWeight
{
unsigned short value;
//const string unit="kg";
//const string type ="sensor";
//const string description="Current overall Vehicle weight. Including passengers, cargo and other load inside the car.";
};
struct CurbWeight
{
unsigned short value;
//const string unit="kg";
//const string type ="attribute";
//const string description="Vehicle curb weight, including all liquids and full tank of fuel, but no cargo or passengers.";
};
struct GrossWeight
{
unsigned short value;
//const string unit="kg";
//const string type ="attribute";
//const string description="Curb weight of vehicle, including all liquids and full tank of fuel and full load of cargo and passengers.";
};
struct MaxTowWeight
{
unsigned short value;
//const string unit="kg";
//const string type ="attribute";
//const string description="Maximum weight of trailer.";
};
struct MaxTowBallWeight
{
unsigned short value;
//const string unit="kg";
//const string type ="attribute";
//const string description="Maximum vertical weight on the tow ball of a trailer.";
};
struct Length
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall vehicle length.";
};
struct Height
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall vehicle height.";
};
struct WidthExcludingMirrors
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall vehicle width excluding mirrors, as defined by SAE J1100-2009 W103.";
};
struct WidthIncludingMirrors
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall vehicle width including mirrors, as defined by SAE J1100-2009 W144.";
};
struct WidthFoldedMirrors
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Overall vehicle width with mirrors folded, as defined by SAE J1100-2009 W145.";
};
struct TurningDiameter
{
unsigned short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Minimum turning diameter, Wall-to-Wall, as defined by SAE J1100-2009 D102.";
};
module Trailer
{
struct IsConnected
{
boolean value;
//const string type ="sensor";
//const string description="Signal indicating if trailer is connected or not.";
};
};

module CurrentLocation
{
struct Timestamp
{
string value;
//const string unit="iso8601";
//const string type ="sensor";
//const string description="Timestamp from GNSS system for current location, formatted according to ISO 8601 with UTC time zone.";
};
struct Latitude
{
double value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Current latitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.";
};
struct Longitude
{
double value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Current longitude of vehicle in WGS 84 geodetic coordinates, as measured at the position of GNSS receiver antenna.";
};
struct Heading
{
double value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Current heading relative to geographic north. 0 = North, 90 = East, 180 = South, 270 = West.";
};
struct HorizontalAccuracy
{
double value;
//const string unit="m";
//const string type ="sensor";
//const string description="Accuracy of the latitude and longitude coordinates.";
};
struct Altitude
{
double value;
//const string unit="m";
//const string type ="sensor";
//const string description="Current altitude relative to WGS 84 reference ellipsoid, as measured at the position of GNSS receiver antenna.";
};
struct VerticalAccuracy
{
double value;
//const string unit="m";
//const string type ="sensor";
//const string description="Accuracy of altitude.";
};
module GNSSReceiver
{
module FixType_M
{
enum FixTypeValues{NONE,TWO_D,TWO_D_SATELLITE_BASED_AUGMENTATION,TWO_D_GROUND_BASED_AUGMENTATION,TWO_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION,THREE_D,THREE_D_SATELLITE_BASED_AUGMENTATION,THREE_D_GROUND_BASED_AUGMENTATION,THREE_D_SATELLITE_AND_GROUND_BASED_AUGMENTATION};
};
struct FixType
{
FixType_M::FixTypeValues value;
//const string type ="sensor";
//const string description="Fix status of GNSS receiver.";
};
module MountingPosition
{
struct X
{
short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = forward of rear axle. Negative values = backward of rear axle.";
};
struct Y
{
short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Mounting position of GNSS receiver antenna relative to vehicle coordinate system. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = left of origin. Negative values = right of origin. Left/Right is as seen from driver perspective, i.e. by a person looking forward.";
};
struct Z
{
short value;
//const string unit="mm";
//const string type ="attribute";
//const string description="Mounting position of GNSS receiver on Z-axis. Axis definitions according to ISO 8855. Origin at center of (first) rear axle. Positive values = above center of rear axle. Negative values = below center of rear axle.";
};
};

};

};

struct PowerOptimizeLevel
{
octet value;
//const string type ="actuator";
//const string description="Power optimization level for this branch/subsystem. A higher number indicates more aggressive power optimization. Level 0 indicates that all functionality is enabled, no power optimization enabled. Level 10 indicates most aggressive power optimization mode, only essential functionality enabled.";
};
struct IsAutoPowerOptimize
{
boolean value;
//const string type ="actuator";
//const string description="Auto Power Optimization Flag When set to 'true', the system enables automatic power optimization, dynamically adjusting the power optimization level based on runtime conditions or features managed by the OEM. When set to 'false', manual control of the power optimization level is allowed.";
};
module Diagnostics
{
struct DTCCount
{
octet value;
//const string type ="sensor";
//const string description="Number of Diagnostic Trouble Codes (DTC)";
};
struct DTCList
{
sequence<string> value;
//const string type ="sensor";
//const string description="List of currently active DTCs formatted according OBD II (SAE-J2012DA_201812) standard ([P|C|B|U]XXXXX )";
};
};

module MotionManagement
{
module ElectricAxle
{
module Row1
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Axle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueTarget
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Target axle torque in torque control mode, positive sign for torque in forward direction, negative sign for torque in backward direction (ISO8855).";
};
struct TorqueMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueLongTermMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum long-term available eAxle torque, default time horizon = 10 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueLongTermMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum long-term available eAxle torque, default time horizon = 10 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueShortTermMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum short-term available eAxle torque, default time horizon = 1 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueShortTermMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum short-term available eAxle torque, default time horizon = 1 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueMaximumLimit
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum allowed eAxle torque in rotation speed control mode, positive sign for torque in forward direction, negative sign unused.";
};
struct TorqueMinimumLimit
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum allowed axle torque in rotation speed control mode, positive sign unused, negative sign for torque in backward direction (ISO8855).";
};
struct RotationalSpeed
{
short value;
//const string unit="rpm";
//const string type ="sensor";
//const string description="Rotational speed for the specified axle, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedTarget
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Target axle rotational speed in rotation speed control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedMaximumLimit
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Maximum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedMinimumLimit
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Minimum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
};

module Row2
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Axle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueTarget
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Target axle torque in torque control mode, positive sign for torque in forward direction, negative sign for torque in backward direction (ISO8855).";
};
struct TorqueMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum momentarily available eAxle torque, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueLongTermMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum long-term available eAxle torque, default time horizon = 10 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueLongTermMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum long-term available eAxle torque, default time horizon = 10 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueShortTermMaximum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Maximum short-term available eAxle torque, default time horizon = 1 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueShortTermMinimum
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Minimum short-term available eAxle torque, default time horizon = 1 sec, positive sign for torque in forward direction, negative sign for torque in backward direction.";
};
struct TorqueMaximumLimit
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum allowed eAxle torque in rotation speed control mode, positive sign for torque in forward direction, negative sign unused.";
};
struct TorqueMinimumLimit
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum allowed axle torque in rotation speed control mode, positive sign unused, negative sign for torque in backward direction (ISO8855).";
};
struct RotationalSpeed
{
short value;
//const string unit="rpm";
//const string type ="sensor";
//const string description="Rotational speed for the specified axle, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedTarget
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Target axle rotational speed in rotation speed control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedMaximumLimit
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Maximum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
struct RotationalSpeedMinimumLimit
{
short value;
//const string unit="rpm";
//const string type ="actuator";
//const string description="Minimum allowed axle rotational speed in torque control mode, positive sign for rotation in forward direction, negative sign for rotation in backward direction.";
};
};

};

module Brake
{
struct VehicleForceMaximum
{
short value;
//const string unit="N";
//const string type ="actuator";
//const string description="Maximum longitudinal brake force request (FxWhlSum). Sum of all tyre longitudinal forces. Brake Force < 0N.";
};
struct VehicleForceElectricMinimumArbitrated
{
short value;
//const string unit="N";
//const string type ="sensor";
//const string description="Brake system internally calculated regenerative force limit at vehicle level for eAxle actuation. Brake Force < 0N.";
};
struct VehicleForceElectric
{
short value;
//const string unit="N";
//const string type ="actuator";
//const string description="Regenerative brake force request (FxWhlSum). Sum of all tyre longitudinal forces. Brake Force < 0N.";
};
struct VehicleForceDistributionFrontMaximum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Maximum distribution range request of FxWhlSum to front axle. 0% = Complete longitudinal brake force shall be shifted to rear axle. 50% = At most 50% shall be shifted to front axle. 100%  = Complete longitudinal brake force may be shifted to front axle.";
};
struct VehicleForceDistributionFrontMinimum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Minimum distribution range request of FxWhlSum to front axle. 0% = Complete longitudinal brake force may be shifted to rear axle. 50% = At least 50% shall be shifted to front axle. 100% = Complete longitudinal brake force shall be shifted to front axle.";
};
module Axle
{
module Row1
{
struct TorqueElectricMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Limit for regenerative brake torque at given axle. Brake Torque < 0Nm.";
};
struct TorqueFrictionDifferenceMaximum
{
unsigned short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum absolute wheel torque difference between left and right wheel for friction brake.";
};
struct TorqueDistributionFrictionRightMaximum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Maximum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque shall be shifted to the left wheel. 50% = At most 50% friction torque may be shifted to the right wheel. 100% = Complete friction torque may be shifted to the right wheel.";
};
struct TorqueDistributionFrictionRightMinimum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Minimum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque may be shifted to the left wheel. 50% = At least 50% friction torque shall be shifted to the right wheel. 100% = Complete friction torque shall be shifted to the right wheel.";
};
module Wheel
{
module Left
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Estimated friction brake torque. Brake Torque < 0Nm.";
};
struct TorqueArbitrated
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Brake system internally calculated friction brake torque target. Brake Torque < 0Nm.";
};
struct TorqueFrictionMaximum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct TorqueFrictionMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct OmegaUpper
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Upper wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
struct OmegaLower
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Lower wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
};

module Right
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Estimated friction brake torque. Brake Torque < 0Nm.";
};
struct TorqueArbitrated
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Brake system internally calculated friction brake torque target. Brake Torque < 0Nm.";
};
struct TorqueFrictionMaximum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct TorqueFrictionMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct OmegaUpper
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Upper wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
struct OmegaLower
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Lower wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
};

};

};

module Row2
{
struct TorqueElectricMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Limit for regenerative brake torque at given axle. Brake Torque < 0Nm.";
};
struct TorqueFrictionDifferenceMaximum
{
unsigned short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum absolute wheel torque difference between left and right wheel for friction brake.";
};
struct TorqueDistributionFrictionRightMaximum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Maximum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque shall be shifted to the left wheel. 50% = At most 50% friction torque may be shifted to the right wheel. 100% = Complete friction torque may be shifted to the right wheel.";
};
struct TorqueDistributionFrictionRightMinimum
{
unsigned short value;
//const string unit="percent";
//const string type ="actuator";
//const string description="Minimum distribution range of the friction brake request on the axle to the right wheel. 0% = Complete friction torque may be shifted to the left wheel. 50% = At least 50% friction torque shall be shifted to the right wheel. 100% = Complete friction torque shall be shifted to the right wheel.";
};
module Wheel
{
module Left
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Estimated friction brake torque. Brake Torque < 0Nm.";
};
struct TorqueArbitrated
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Brake system internally calculated friction brake torque target. Brake Torque < 0Nm.";
};
struct TorqueFrictionMaximum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct TorqueFrictionMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct OmegaUpper
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Upper wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
struct OmegaLower
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Lower wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
};

module Right
{
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Estimated friction brake torque. Brake Torque < 0Nm.";
};
struct TorqueArbitrated
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Brake system internally calculated friction brake torque target. Brake Torque < 0Nm.";
};
struct TorqueFrictionMaximum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Maximum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct TorqueFrictionMinimum
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Minimum wheel torque request for friction brake. Brake Torque < 0Nm.";
};
struct OmegaUpper
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Upper wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
struct OmegaLower
{
unsigned short value;
//const string unit="rad/s";
//const string type ="actuator";
//const string description="Lower wheel speed limit request controlled by friction brake. ISO 8855 wheel-spin velocity.";
};
};

};

};

};

};

module Steering
{
module SteeringWheel
{
struct Angle
{
short value;
//const string unit="degrees";
//const string type ="sensor";
//const string description="Represents the current input angle of the steering system, typically corresponds to angle applied by driver on the steering-wheel. Positive for angle in counterclockwise direction (based on ISO8855).";
};
struct AngleTarget
{
short value;
//const string unit="degrees";
//const string type ="actuator";
//const string description="Steering-wheel angle request to the steering actuator (external set-point for steer-by-wire). Positive sign for angle in counterclockwise direction (based on ISO8855).";
};
struct AngleTargetMode
{
octet value;
//const string type ="actuator";
//const string description="Mode used for controlling Steering-wheel angle interface. 0 indicates interface disabled. Other values activate vehicle specific modes.";
};
struct TorqueOffsetTarget
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Steering-wheel torque offset request to the steering actuator, added to the actuator internal calculated target value. Positive sign for torque in counterclockwise direction (based on ISO8855).";
};
struct TorqueOffsetTargetMode
{
octet value;
//const string type ="actuator";
//const string description="Mode used for controlling steering-wheel torque offset interface. 0 indicates interface disabled. Other values activate vehicle specific modes.";
};
struct TorqueTarget
{
short value;
//const string unit="Nm";
//const string type ="actuator";
//const string description="Steering-wheel torque request to the steering actuator (external set-point for steer-by-wire). Positive sign for torque in counterclockwise direction (based on ISO8855).";
};
struct TorqueTargetMode
{
octet value;
//const string type ="actuator";
//const string description="Mode used for controlling Steering-wheel torque interface. 0 indicates interface disabled. Other values activate vehicle specific modes.";
};
struct Torque
{
short value;
//const string unit="Nm";
//const string type ="sensor";
//const string description="Represents the current input torque for steering system, typically corresponds to torque applied by driver on the steering wheel. Positive for torque in counterclockwise direction (based on ISO8855).";
};
};

module Axle
{
module Row1
{
struct RackPositionOffsetTarget
{
short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Rack position offset request to the axle steering actuator (for steer-by-wire), added to the actuator internal calculated set-point. Positive values without internal calculated set point change lead to a left movement of the vehicle (based on ISO8855).";
};
struct RackPositionOffsetTargetMode
{
octet value;
//const string type ="actuator";
//const string description="Mode used for controlling rack position offset interface of axle steering actuator. 0 indicates interface disabled. Other values activate vehicle specific modes.";
};
struct RackPosition
{
short value;
//const string unit="mm";
//const string type ="sensor";
//const string description="Represents the current position of the steering rack on axle steering actuator. Positive values leads to a left turn of the vehicle (based on ISO8855).";
};
struct RackPositionTarget
{
short value;
//const string unit="mm";
//const string type ="actuator";
//const string description="Rack position request to the axle steering actuator (external set-point). Positive values lead to a left turn of the vehicle (based on ISO8855).";
};
struct RackPositionTargetMode
{
octet value;
//const string type ="actuator";
//const string description="Mode used for controlling rack position interface of axle steering actuator. 0 indicates interface disabled. Other values activate vehicle specific modes.";
};
};

};

};

};

};
